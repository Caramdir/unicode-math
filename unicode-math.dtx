% \iffalse
%<*internal>
\iffalse
%</internal>
%<*readme>
The UNICODE-MATH package
========================

This package will provide a complete implementation of unicode maths for
XeTeX. While I do not encourage people to use this package for production
work, I understand that it has certain uses and am making it available for
distribution. Your testing and feedback is essential to fill in the many gaps
that I miss!

Please be aware that this package is undergoing (very slow) continued
development and the interface and functionality should not be considered
stable. Use at your own risk, in other words.

Unicode maths is currently supported to one degree or another by the fonts

 - [Cambria Math][0] (Microsoft, proprietry),
 - [Asana Math][1] (Apostolos Syropolous, open source),
 - [Neo Euler][2] (Khalid Hosny, open source), and
 - [STIX][3] (STI Pub, free but not yet publicly available).

I'm always looking for new fonts to test with, so please let me know of any
new releases.

[0]: http://www.ascenderfonts.com/font/cambria-regular.aspx
[1]: http://www.ctan.org/tex-archive/fonts/Asana-Math/
[2]: http://github.com/khaledhosny/euler-otf
[3]: http://www.aip.org/stixfonts/


PACKAGE USAGE
-------------

Please see the PDF documentation for full details. A simple beginning is:

    \usepackage{unicode-math}
    \setmathfont{Cambria Math}

Most LaTeX math should still work after this. (Let me know if it doesn't.)
Furthermore, it will be in a different font.

Note that `amsmath` must be loaded *before* `unicode-math`, since we
overwrite many of its definitions.


REQUIREMENTS
------------

As well as running XeTeX, of course, this package requires recent versions
of the expl3 and xpackages bundles.
These form the basis of the new LaTeX3 programming layer.
If you're using TeX Live 2009 or MiKTeX 2.8 then there'll be no problems.


INSTALLATION
------------

Run TeX on unicode-math.dtx to generate the package file unicode-math.sty:

    tex unicode-math.dtx

If you have the necessary fonts, you may compile the documentation
with XeLaTeX:

    xelatex unicode-math.dtx

To install the package, place unicode-math.sty and unicode-math-table.tex
in a place searched by XeLaTeX; on Mac OS X, for example:

    ~/Library/texmf/tex/xelatex/

__________________________________
Copyright 2006-2009 Will Robertson  
Released under the LaTeX Project Public License
%</readme>
%<*internal>
\fi
%</internal>
%
%<*internal>
\begingroup
%</internal>
%<*batchfile>
\input docstrip.tex
\keepsilent
\preamble
  Copyright © 2006-2009  Will Robertson
  License information appended.
\endpreamble
\postamble

Copyright © 2006-2009 by Will Robertson <wspr81@gmail.com>

This package is free software and may be redistributed and/or modified under
the conditions of the LaTeX Project Public License, version 1.3c or higher
(your choice): <http://www.latex-project.org/lppl/>.

This work is "author-maintained" by Will Robertson.

This work consists of the files unicode-math.dtx and unicode-math-table.tex
          and the derived files unicode-math.sty and unicode-math.pdf.

\endpostamble
\askforoverwritefalse
\generate{\file{unicode-math.sty}{\from{unicode-math.dtx}{package}}}
\nopreamble\nopostamble
%</batchfile>
%<batchfile>\endbatchfile
%<*internalbatchfile>
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{batchfile}}}
\generate{\file{README.markdown}{\from{\jobname.dtx}{readme}}}
\generate{\file{dtx-style.sty}{\from{\jobname.dtx}{dtx-style}}}
%\generate{\file{stix-extract.sh}{\from{\jobname.dtx}{awk}}}
\def\tempa{plain}
\ifx\tempa\fmtname
  \def\next{\endgroup\end}
\else
  \def\next{\endgroup}
\fi
\next
%</internalbatchfile>
%
%<*driver>
\documentclass{ltxdoc}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
%\OnlyDescription
\usepackage{dtx-style}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
%
% \fi
%
% \GetFileInfo{\jobname.sty}
% \CheckSum{0}
% \makeatletter
%
% \title{Experimental unicode mathematical typesetting: The \pkg{unicode-math} package}
% \author{Will Robertson}
% \date{\filedate \qquad \fileversion}
%
% \maketitle
%
% \begin{abstract}
% \noindent
% \begingroup
% \bfseries
% Warning! This package is experimental and subject to change without regard
% for backwards compatibility.
% Performance issues may be encountered until algorithms are refined.
% \endgroup
% 
% This package is intended to be a complete implementation of unicode
% maths for \LaTeX\ using the \XeTeX\ (and later, Lua\TeX) typesetting engines.
% With this package, changing maths fonts will be as easy as changing
% text fonts --- not that there are many unicode maths fonts yet.
% 
% Maths input is simplified with unicode since literal glyphs may be
% entered instead of control sequences.
% \end{abstract}
% 
% \newpage
% \tableofcontents
%
% \newpage
% \section{Introduction}
%
% This document describes the \pkg{unicode-math} package, which is an
% \emph{experimental} implementation of a macro to unicode glyph encoding for
% mathematical characters. Its intended use is for \XeTeX, although it is
% conjectured that some effect could be spent to create a cross-format
% package that would also work with Lua\TeX.
%
% Users who desire to specify maths alphabets only (Greek and Latin letters)
% may wish to use Andrew Moschou's \pkg{mathspec} package instead.
% 
% \section{Acknowledgements}
% 
% Many thanks to
% Microsoft for developing OpenType math as part of Office~2007;
% Jonathan Kew for implementing unicode math support in \XeTeX;
% Barbara Beeton for her prodigious effort compiling the definitive list of unicode math
% glyphs and their \LaTeX\ names (inventing them where necessary), and also
% for her thoughtful replies to my sometimes incessant questions.
% Ross Moore and Chris Rowley have provided moral and technical support
% from the very early days with great insight into the issues we face trying
% to extend and use \TeX\ in the future.
% Apostolos Syropoulos, Joel Saloman, and Khaled Hosny have been fantastic
% beta testers.
% 
% \section{Getting started}
% 
% Load \pkg{unicode-math} as a regular \LaTeX\ package. It should be loaded
% after any other maths or font-related package in case it needs to overwrite
% their definitions. Here's an example:
% \begin{quote}
% \begin{verbatim}
% \usepackage{amsmath} % if desired
% \usepackage{unicode-math}
% \setmathfont{Cambria Math}
% \end{verbatim}
% \end{quote}
% 
% \subsection{Package options}
% Package options may be set when the package as loaded or at any later
% stage with the \cs{unimathsetup} command. Therefore, the following two
% examples are equivalent:
% \begin{quote}
% \begin{verbatim}
% \usepackage[math-style=TeX]{unicode-math}
% % OR
% \usepackage{unicode-math}
% \unimathsetup{math-style=TeX}
% \end{verbatim}
% \end{quote}
% Note, however, that some package options affects how maths is initialised
% and changing an option such as |math-style| will not take effect until a
% new maths font is set up.
% 
% Package options may \emph{also} be used when declaring new maths fonts,
% passed via options to the \cs{setmathfont} command.
% Therefore, the following two examples are equivalent:
% \begin{quote}
% \begin{verbatim}
% \unimathsetup{math-style=TeX}
% \setmathfont{Cambria Math}
% % OR
% \setmathfont[math-style=TeX]{Cambria Math}
% \end{verbatim}
% \end{quote}
% 
% A short list of package options is shown in \tabref{pkgopt}.
% See following sections for more information.
% 
% \begin{table}\centering
%   \topcaption{Package options.}
%   \tablabel{pkgopt}
%   \begin{tabular}{lll}
%     \toprule
%     Option & Description & See\dots \\
%     \midrule
%     |math-style| & Style of letters & \secref{math-style} \\
%     |bold-style| & Style of bold letters & \secref{bold-style} \\
%     |sans-style| & Style of sans serif letters & \secref{sans-style} \\
%     |nabla|      & Style of the nabla symbol & \secref{nabla} \\
%     |partial|    & Style of the partial symbol & \secref{partial} \\
%     |vargreek-shape|  & Style of phi and epsilon & \secref{vargreek-shape} \\
%     |colon| & Behaviour of \cs{colon} & \secref{colon} \\
%     |slash-delimiter| & Glyph to use for `stretchy' slash & \secref{slash-delimiter} \\
%     \bottomrule
%   \end{tabular}
% \end{table}
% 
%
% \section{Unicode maths font setup}
%
% In the ideal case, a single unicode font will contain all maths glyphs we
% need. The file |unicode-math-table.tex| (based on Barbara Beeton's \STIX\ table)
% provides the mapping between unicode
% maths glyphs and macro names (all 3298 — or however many — of them!). A
% single command
% \codeline{\cmd\setmathfont\oarg{font features}\marg{font name}}
% implements this for every every symbol and alphabetic variant.
% That means |x| to $x$, |\xi| to $\xi$, |\leq| to $\leq$, etc., |\mathcal{H}|
% to $\mathcal{H}$ and so on, all for unicode glyphs within a single font.
%
% This package deals well with unicode characters for maths
% input. This includes using literal Greek letters in formulae,
% resolving to upright or italic depending on preference.
%
% Font features specific to \pkg{unicode-math} are shown in \tabref{mathfontfeatures}.
% Package options (see \tabref{pkgopt}) may also be used.
% Other \pkg{fontspec} features are also valid.
% 
% \begin{table}\centering
%   \topcaption{Maths font options.}
%   \tablabel{mathfontfeatures}
%   \begin{tabular}{lll}
%     \toprule
%     Option & Description & See\dots \\
%     \midrule
%     |range| & Style of letters & \secref{range} \\
%     |script-font| & Font to use for sub- and super-scripts & \secref{sscript} \\
%     |script-features| & Font features for sub- and super-scripts & \secref{sscript} \\
%     |sscript-font| & Font to use for nested sub- and super-scripts & \secref{sscript} \\
%     |sscript-features| & Font features for nested sub- and super-scripts & \secref{sscript} \\
%     \bottomrule
%   \end{tabular}
% \end{table}
%
% \subsection{Using multiple fonts}
% \seclabel{range}
%
% There will probably be few cases where a single unicode maths font suffices
% (simply due to glyph coverage). The upcoming \STIX\ font comes to mind as a
% possible exception. It will therefore be necessary to delegate specific
% unicode ranges of glyphs to separate fonts:
%   \codeline{\cmd\setmathfont|[range=|\meta{unicode range}|,|\meta{font features}|]|\marg{font name}}
% where \meta{unicode range} is a comma-separated list of unicode slots and
% ranges such as |{"27D0-"27EB,"27FF,"295B-"297F}|. You may also use the macro
% for accessing the glyph, such as \cs{int}, or whole collection of symbols with
% the same math type, such as \cs{mathopen}, or complete math alphabets such as \cs{mathbb}.
% (Only numerical slots, however, can be used in ranged declarations.)
% 
% \subsubsection{Control over maths alphabets}
% 
% Exact control over maths alphabets can be somewhat involved.
% Here is the current plan.
% \begin{itemize}
% \item |[range=\mathbb]| to use the font for `bb' letters only.
% \item |[range=\mathbfsfit/gG]| for Greek lowercase and uppercase only (with |l|, |L|, |N| as well for Latin lower-/upper-case, and numbers).
% \item |[range=\mathsfit->\mathbfsfit]| to map to different output alphabet(s) (which is rather useless right now but will become less useless in the future).
% \end{itemize}
% 
% And now the trick.
% If a particular math alphabet is not defined in the font, fall back onto the lower-base plane (i.e., upright) glyphs.
% Therefore, to use an \ascii-encoded fractur font, for example, write
% \par{\centering|\setmathfont[range=\mathfrak]{SomeFracturFont}|\par}\noindent
% and because the math plane fractur glyphs will be missing, \pkg{unicode-math} will know to use the \ascii\ ones instead.
% 
% And due to this behaviour, simply loading the Euler math font as usual will cause the upright glyphs to be substituted for the missing italic ones.
% 
%
% \subsection{Script and scriptscript fonts/features}
% \seclabel{sscript}
%
% Cambria Math uses OpenType font features to activate smaller optical sizes
% for scriptsize and scriptscriptsize symbols (the $B$ and $C$, respectively,
% in $A_{B_C}$). Other fonts will possibly use entirely separate fonts.
% 
% Not yet implemented: Both of these options
% must be taken into account. I hope this will be mostly automatic from the
% users' points of view. The |+ssty| feature can be detected and applied
% automatically, and appropriate optical size information embedded in the
% fonts will ensure this latter case. Fine tuning should be possible
% automatically with \pkg{fontspec} options. We might have to wait until
% MnMath, for example, before we really know.
%
% \section{Maths input}
%
% \XeTeX's unicode support allows maths input through two methods. Like
% classical \TeX, macros such as \cmd\alpha, \cmd\sum, \cmd\pm, \cmd\leq, and
% so on, provide verbose access to the entire repertoire of characters defined
% by unicode. The literal characters themselves may be used instead, for more
% readable input files.
%
% \subsection{Math `style'}
% \seclabel{math-style}
%
% Classically, \TeX\ uses italic lowercase Greek letters and \emph{upright}
% uppercase Greek letters for variables in mathematics. This is contrary to
% the ISO standards of using italic forms for both upper- and lowercase.
% Furthermore, the French (contrary again, \emph{quelle surprise}) have been
% known to use upright uppercase \emph{Latin} letters as well as upright
% upper- and lowercase Greek. Finally, it is not unknown to use upright letters
% for all characters, as seen in the Euler fonts.
%
% The \pkg{unicode-math} package accommodates these possibilities with an
% interface heavily inspired by Walter Schmidt's \pkg{lucimatx} package: a
% package option \opt{math-style} that takes one of four arguments:
% \opt{TeX}, \opt{ISO}, \opt{French}, or \opt{upright} (case insensitive).
%
% The philosophy behind the interface to the mathematical alphabet symbols
% lies in \LaTeX's attempt of separating content and formatting. Because input
% source text may come from a variety of places, the upright and
% `mathematical' italic Latin and Greek alphabets are \emph{unified} from the
% point of view of having a specified meaning in the source text. That is, to
% get a mathematical ‘$x$’, either the ascii (`keyboard') letter |x| may
% be typed, or the actual unicode character may be used. Similarly for Greek
% letters. The upright or italic forms are then chosen based on the
% |math-style| package option.
%
% If glyphs are desired that do not map as per the package option (for
% example, an upright `g' is desired but typing |$g$| yields `$g$'),
% \emph{markup} is required to specify this; to follow from the example:
% |\mathup{g}|. Maths alphabets commands such as \cmd\mathup\ are detailed
% later.
%
% \paragraph{Alternative interface}
% However, some users may not like this convention of normalising their input.
% For them, an upright |x| is an upright `x' and that's that.
% (This will be the case when obtaining source text from copy/pasting PDF or
% Microsoft Word documents, for example.)
% For these users, the |literal| option to |math-style| will effect this behaviour.
%
% The \opt{math-style} options' effects are shown in brief in \tabref{math-style}.
%
% \begin{table}
%   \centering
%   \topcaption{Effects of the \opt{math-style} package option.}
%   \tablabel{math-style}
%   \begin{tabular}{@{}>{\ttfamily}lcc@{}}
%     \toprule
%       & \multicolumn{2}{c}{Example} \\
%        \cmidrule(l){2-3}
%       \rmfamily Package option & Latin & Greek \\
%     \midrule
%       math-style=ISO & $(a,z,B,X)$ & $\mathit{(\alpha,\beta,\Gamma,\Xi)}$ \\
%       math-style=TeX & $(a,z,B,X)$ & $(\mathit\alpha,\mathit\beta,\mathup\Gamma,\mathup\Xi)$ \\
%       math-style=French & $(a,z,\mathup B,\mathup X)$ & $(\mathup\alpha,\mathup\beta,\mathup\Gamma,\mathup\Xi)$ \\
%       math-style=upright & $(\mathup a,\mathup z,\mathup B,\mathup X)$ & $(\mathup\alpha,\mathup\beta,\mathup\Gamma,\mathup\Xi)$ \\
%     \bottomrule
%   \end{tabular}
% \end{table}
%
%
% \subsection{Bold style}
% \seclabel{bold-style}
%
% Similar as in the previous section, ISO standards differ somewhat to \TeX's
% conventions (and classical typesetting) for `boldness' in mathematics. In
% the past, it has been customary to use bold \emph{upright} letters to denote
% things like vectors and matrices. For example, \( \mathbfup{M} =
% (\mitM_x,\mitM_y,\mitM_z) \). Presumably, this was due to the relatively
% scarcity of bold italic fonts in the pre-digital typesetting era. It has
% been suggested that \emph{italic} bold symbols are used nowadays instead.
%
% Bold Greek letters have simply been bold variant glyphs of their regular
% weight, as in \( \mbfitxi = (\mitxi_\mitr,\mitxi_\mitphi,\mitxi_\mittheta)
% \). Confusingly, the syntax in \LaTeX\ has been different for these two
% examples: \cmd\mathbf\ in the former (`$\mathbfup{M}$'), and \cmd\bm\ (or
% \cmd\boldsymbol, deprecated) in the latter (`$\mbfitxi$').
%
% In \pkg{unicode-math}, the \cmd\mathbf\ command works directly with both
% Greek and Latin maths alphabet characters and depending on package option
% either switches to upright for Latin letters (|bold-style=TeX|) as well or
% keeps them italic (|bold-style=ISO|).
%
% To match the package options for non-bold characters, for
% |bold-style=upright| all bold characters are upright, and
% |bold-style=literal| does not change the upright/italic shape of the letter.
%
% Upright and italic bold mathematical letters input as direct unicode
% characters are normalised with the same rules. For example, with
% |bold-style=TeX|, a literal bold italic latin character will be typeset
% upright.
%
% Note that \opt{bold-style} is independent of \opt{math-style}, although if
% the former is not specified then sensible defaults are chosen based on the
% latter.
%
% The \opt{bold-style} options' effects are shown in brief in
% \tabref{bold-style}.
%
% \begin{table}
%   \centering
%   \topcaption{Effects of the \opt{bold-style} package option.}
%   \tablabel{bold-style}
%   \begin{tabular}{@{}>{\ttfamily}lcc@{}}
%     \toprule
%       & \multicolumn{2}{c}{Example} \\
%        \cmidrule(l){2-3}
%       \rmfamily Package option & Latin & Greek \\
%     \midrule
%       bold-style=ISO & $(\mathbfit a, \mathbfit z, \mathbfit B, \mathbfit X)$ & $(\mathbfit\alpha, \mathbfit\beta, \mathbfit\Gamma, \mathbfit\Xi)$ \\
%       bold-style=TeX & $(\mathbfup a,\mathbfup z,\mathbfup B,\mathbfup X)$ & $(\mathbfit\alpha, \mathbfit\beta,\mathbfup \Gamma,\mathbfup \Xi)$ \\
%       bold-style=upright & $(\mathbfup a,\mathbfup z,\mathbfup B,\mathbfup X)$ & $(\mathbfup \alpha,\mathbfup \beta,\mathbfup \Gamma,\mathbfup \Xi)$ \\
%     \bottomrule
%   \end{tabular}
% \end{table}
%
% 
% \subsection{Sans serif style}
% \seclabel{sans-style}
% 
% Unicode contains upright and italic, medium and bold mathematical alphabet characters.
% These may be explicitly selected with the \cs{mathsfup}, \cs{mathsfit}, \cs{mathbfsfup}, and \cs{mathbfsfit}
% commands discussed in \secref{all-math-alphabets}.
% 
% How should the generic \cs{mathsf} behave? Unlike bold, sans serif is used much more sparingly
% in mathematics. I've seen recommendations to typeset tensors in sans serif italic
% or sans serif italic bold (e.g., examples in the \pkg{isomath} and \pkg{mattens} packages).
% But \LaTeX's \cs{mathsf} is \textsl{upright} sans serif.
% 
% Therefore I reluctantly add the package options |[sans-style=upright]| and |[sans-style=italic]| to control the behaviour of \cs{mathsf}.
% The |upright| style sets up the command to use the seemingly-useless upright sans serif, including Greek;
% the |italic| style switches to using italic in both Latin and Greek alphabets.
% In other words, this option simply changes the meaning of \cs{mathsf} to either \cs{mathsfup} or \cs{mathsfit}, respectively.
% Please let me know if more granular control is necessary here.
% 
% There is also a |[sans-style=literal]| setting, set automatically with |[math-style=literal]|, which retains the uprightness of the input characters used when selecting the sans serif output.
% 
% \subsubsection{What about bold sans serif?}
% 
% While you might want your bold upright and your sans serif italic, I don't believe you'd also want
% your bold sans serif upright (or all vice versa, if that's even conceivable). Therefore, bold sans
% serif follows from the setting for sans serif; it is completely independent of the setting for bold.
% 
% In other words, \cs{mathbfsf} is \cs{mathbfsfup} or \cs{mathbfsfit} based on |[sans-style=upright]| or |[sans-style=italic]|, respectively. And |[sans-style=literal]| causes \cs{mathbfsf} to retain the same italic or upright shape as the input, and turns it bold sans serif.
% 
% Note well! There is no medium-weight sans serif Greek alphabet in unicode; therefore, |\mathsf{\alpha}| does not make sense (simply produces `$\mathsf{\alpha}$') while |\mathbfsf{\alpha}| gives `$\mathsf{\alpha}$'.
% 
% \subsection{All (the rest) of the mathematical alphabets}
% \seclabel{all-math-alphabets}
% 
% Unicode contains separate codepoints for most if not all variations of alphabet
% shape one may wish to use in mathematical notation. The complete list is shown
% in \tabref{mathalphabets}. Some of these have been covered in the previous sections.
% 
% At present, the math font switching commands do not nest; therefore if you want
% sans serif bold, you must write |\mathsfbf{...}| rather than |\mathbf{\mathsf{...}}|.
% This may change in the future.
% 
% \begin{table}
% \caption{Mathematical alphabets defined in unicode. Black dots indicate an alphabet exists in the font specified; grey dots indicate shapes that should always be taken from the upright font even in the italic style. See main text for description of \cs{mathbbit}.}
% \tablabel{mathalphabets}
% \centering
% \def\Y{\textbullet}
% \def\M{\textcolor{gray}{\textbullet}}
% \begin{tabular}{@{} lll l ccc @{}}
% \toprule
% \multicolumn{3}{c}{Font} & & \multicolumn{3}{c}{Alphabet} \\
% \cmidrule(r){1-3}
% \cmidrule(l){5-7}
% Style & Shape & Series & Switch & Latin & Greek & Numerals \\
% \midrule
% Serif      & Upright & Normal & \cs{mathup}     & \Y & \Y & \Y  \\
%            &         & Bold   & \cs{mathbfup}   & \Y & \Y & \Y  \\
%            & Italic  & Normal & \cs{mathit}     & \Y & \Y & \M  \\
%            &         & Bold   & \cs{mathbfit}   & \Y & \Y & \M  \\
% Sans serif & Upright & Normal & \cs{mathsfup}   & \Y &    & \Y  \\
%            & Italic  & Normal & \cs{mathsfit}   & \Y &    & \M  \\
%            & Upright & Bold   & \cs{mathsfbfup} & \Y & \Y & \Y  \\
%            & Italic  & Bold   & \cs{mathsfbfit} & \Y & \Y & \M  \\
% Typewriter & Upright & Normal & \cs{mathtt}     & \Y &    & \Y  \\
% Double-struck & Upright & Normal & \cs{mathbb}     & \Y &    & \Y  \\
%               & Italic  & Normal & \cs{mathbbit}   & \Y &    &  \\
% Script     & Upright & Normal & \cs{mathscr}    & \Y &    &     \\
%            &         & Bold   & \cs{matbfscr}   & \Y &    &     \\
% Fraktur    & Upright & Normal & \cs{mathfrak}   & \Y &    &     \\
%            &         & Bold   & \cs{mathbffrac} & \Y &    &     \\
% \bottomrule
% \end{tabular}
% \end{table}
% 
% \subsubsection{Double-struck}
% 
% The double-struck alphabet (also known as `blackboard bold') consists of
% upright Latin letters $\{\mathbb{a}$--$\mathbb{z}$,$\mathbb{A}$$\mathbb{Z}\}$,
% numerals $\mathbb{0}$--$\mathbb{9}$, summation symbol $\mathbb\sum$, and four
% Greek letters only: $\{\mathbb{\gamma\pi\Gamma\Pi}\}$.
% 
% While |\mathbb{\sum}| does produce a double-struck summation symbol,
% its limits aren't properly aligned (see \secref{limits}). Therefore,
% either the literal character or the control sequence \cs{Bbbsum} are
% recommended instead.
% 
% There are also five Latin \emph{italic} double-struck letters: $\mathbbit{Ddeij}$.
% These can be accessed (if not with their literal characters or control sequences)
% with the \cs{mathbbit} alphabet switch, but note that only those five letters
% will give the expected output.
% 
% 
%
% \subsection{Miscellanea}
%
%
% \subsubsection{Nabla} 
% \seclabel{nabla}
% 
%  The symbol $\nabla$ comes in the six forms shown in \tabref{nabla}.
%  We want an individual option to specify whether we want upright or italic
%  nabla by default (when either upright or italic nabla is used in the
%  source). \TeX\ classically uses an upright nabla, but \textsc{iso}
%  standards differ (I think). The package options |nabla=upright| and
%  |nabla=italic| switch between the two choices. This is then inherited
%  through \cmd\mathbf; \cmd\mathit\ and \cmd\mathup\ can be used to force one
%  way or the other.
%
% |nabla=italic| is implicit when using |math-style=ISO| and |nabla=upright|
% follows both |math-style=TeX| and |math-style=French|.
%
% \begin{table}
%   \centering
%   \topcaption{The various forms of nabla.}
%   \tablabel{nabla}
%   \let \tmpshow\empty
%   \begin{tabular}{@{}llc@{}}
%       \toprule
%     \multicolumn{2}{@{}l}{Description} & Glyph
%      \\ \cmidrule(r){1-2}\cmidrule(l){3-3}
%     Upright & Serif & $\mathup\nabla$ \\
%     & Bold serif & $\mathup\mbfnabla$ \\
%     & Bold sans & $\mathbfsf\nabla$ \\
%       \cmidrule(lr){1-2}\cmidrule(lr){3-3}
%     Italic & Serif & $\mathit\nabla$ \\
%     & Bold serif & $\mathbfit\nabla$ \\
%     & Bold sans & $\mathbfsfit\nabla$ \\
%       \bottomrule
%   \end{tabular}
% \end{table}
%
% \subsubsection{Partial}
% \seclabel{partial}
% 
% The same applies to the symbols \unichar{2202}{partial differential} and
% \unichar{1D715}{math italic partial differential}.
%
% At time of writing, both the Cambria Math and STIX fonts display these
% two glyphs in the same italic style, but this is hopefully a bug that will
% be corrected in the future~--- the `plain' partial differential should
% really have an upright shape.
%
% Use the |partial=upright| or |partial=italic| package options to specify
% which one you would like. The default is (always, unless someone requests and
% argues otherwise) |partial=italic|.\footnote{A good argument would revolve
% around some international standards body recommending upright over italic.
% I just don't have the time right now to look it up.}
%
% See \tabref{partial} for the variations on the partial differential symbol.
%
% \begin{table}
%   \centering
%   \topcaption{The various forms of the partial differential. Note that in
% the fonts used to display these glyphs, the first upright partial is
% incorrectly shown in an italic style.}
%   \tablabel{partial}
%   \begin{tabular}{@{}llc@{}}
%       \toprule
%     \multicolumn{2}{@{}l}{Description} & Glyph
%      \\ \cmidrule(r){1-2}\cmidrule(l){3-3}
%     Regular   & Upright & $\mathup\partial$ \\
%               & Italic  & $\mathit\partial$ \\
%     Bold      & Upright & $\mathbfup\partial$ \\
%               & Italic  & $\mathbfit\partial$ \\
%     Sans bold & Upright & $\mathbfsfup\partial$ \\
%               & Italic  & $\mathbfsfit\partial$ \\
%       \bottomrule
%   \end{tabular}
% \end{table}
%
% \subsubsection{Epsilon and phi: $\epsilon$ vs.\ $\varepsilon$ and $\phi$ vs.\ $\varphi$}
% \seclabel{vargreek-shape}
%
% \TeX\ defines \cs{epsilon} to look like $\varepsilon$ and \cs{varepsilon} to
% look like $\epsilon$. The Unicode glyph directly after delta and before zeta
% is `epsilon' and looks like $\epsilon$; there is a subsequent variant of
% epsilon that looks like $\varepsilon$. This creates a problem. People who
% use unicode input won't want their glyphs transforming; \TeX\ users will be
% confused that what they think as `normal epsilon' is actual the `variant
% epsilon'. And the same problem exists for `phi'.
%
% We have a package option to control this behaviour.
% With |vargreek-shape=TeX|,
% \cs{phi} and \cs{epsilon} produce $\phi$ and $\epsilon$ and
% \cs{varphi} and \cs{varepsilon} produce $\varphi$ and $\varepsilon$.
% With |vargreek-shape=unicode|, these symbols are swapped.
% Note, however, that unicode characters are not affected by this option.
% That is, no remapping occurs of the characters/glyphs, only the control sequences.
%
% The package default is to use |vargreek-shape=TeX|.
%
% \unichar{3B5}{greek small letter epsilon}\\
% \unichar{3F5}{greek lunate epsilon symbol}\\
% \unichar{3C6}{greek small letter phi}\\
% \unichar{3D5}{greek small letter script phi}
%
% \subsubsection{Primes}
%
% Primes ($x'$) may be input in several ways. You may use any combination
% of ascii straight quote (\texttt{\char`\'}), unicode prime ($'$), and
% \cs{prime}; when multiple primes occur next to each other, they chain
% together to form double, triple, or quadruple primes if the font contains
% pre-drawn glyphs. These may also be accessed with \cs{primedouble},
% \cs{primetriple}, and \cs{primequadruple}.
%
% If the font does not contain the pre-drawn glyphs or more than four primes
% are used, the single prime glyph is used multiple times with a negative
% kern to get the spacing right. There is no user interface to adjust this
% negative kern yet (because I haven't decided what it should look like);
% if you need to, write something like this:
% \begin{verbatim}
% \ExplSyntaxOn
% \muskip_gset:Nn \g_um_primekern_muskip { -\thinmuskip/2 }
% \ExplySyntaxOff
% \end{verbatim}
% 
% \subsubsection{Unicode subscripts and superscripts}
% 
% You may, if you wish, use unicode subscripts and superscripts in your
% source document. For basic expressions, the use of these characters
% can make the input more readable.
% Adjacent sub- or super-scripts will be concatenated into a single
% expression.
% 
% The range of subscripts and superscripts supported by this package
% are shown in \figref{superscripts,subscripts}. Please request more if
% you think it is appropriate.
% 
% \begin{figure}\centering
% \fbox{\fontspec{Charis SIL}\Large
% A
% ^^^^2070
% ^^^^00b9
% ^^^^00b2
% ^^^^00b3
% ^^^^2074
% ^^^^2075
% ^^^^2076
% ^^^^2077
% ^^^^2078
% ^^^^2079
% ^^^^207a
% ^^^^207b
% ^^^^207c
% ^^^^207d
% ^^^^207e
% ^^^^2071
% ^^^^207f
% Z}
% \caption{
%   The unicode superscripts supported as input characters.
%   These are the literal glyphs from Charis SIL,
%   not the output seen when used for maths input.
%   The `A' and `Z' are to provide context for the size and
%   location of the superscript glyphs.
% }
% \figlabel{superscripts}
% \end{figure}
% 
% \begin{figure}\centering
% \fbox{\fontspec{Charis SIL}\Large
% A
% ^^^^2080
% ^^^^2081
% ^^^^2082
% ^^^^2083
% ^^^^2084
% ^^^^2085
% ^^^^2086
% ^^^^2087
% ^^^^2088
% ^^^^2089
% ^^^^208a
% ^^^^208b
% ^^^^208c
% ^^^^208d
% ^^^^208e
% ^^^^2090
% ^^^^2091
% ^^^^1d62
% ^^^^2092
% ^^^^1d63
% ^^^^1d64
% ^^^^1d65
% ^^^^2093
% ^^^^1d66
% ^^^^1d67
% ^^^^1d68
% ^^^^1d69
% ^^^^1d6a
% Z}
% \caption{
%   The unicode subscripts supported as input characters.
%   See note from \figref{superscripts}.
% }
% \figlabel{subscripts}
% \end{figure}
% 
% \subsubsection{Colon}
% \seclabel{colon}
% 
% The colon is one of the few confusing characters of unicode maths.
% In \TeX, \texttt{:} is defined as a colon with relation spacing: `$a:b$'.
% While \cs{colon} is defined as a colon with punctuation spacing: `$a\colon b$'.
% 
% In unicode, \unichar{003A}{colon} is defined as a punctuation symbol,
% while \unichar{2236}{ratio} is the colon-like symbol used in mathematics to denote
% ratios and other things.
% 
% This breaks the usual straightforward mapping from control sequence to unicode input character
% to (the same) unicode glyph.
% 
% To preserve input compatibility, we remap the \ascii\ input character `\texttt{:}' to \unichar{2236}{ratio}.
% Typing a literal \unichar{2236}{ratio} char will result in the same output.
% If \pkg{amsmath} is loaded, then the definition of \cs{colon} is inherited from there
% (it looks like a punctuation colon with additional space around it).
% Otherwise, \cs{colon} is made to output a colon with \cs{mathpunct} spacing.
% 
% The package option |[colon=literal]| forces \ascii\ input `|:|' to be printed as \cs{mathcolon} instead.
%
% 
% \subsubsection{Slashes and backslashes}
% \seclabel{slash-delimiter}
% 
% There are several slash-like symbols defined in unicode. The complete list is shown in \tabref{slashes}.
% 
% \begin{table}\centering
% \caption{Slashes and backslashes.}
% \tablabel{slashes}
% \newfontfamily\stix{STIXGeneral}
% \renewcommand\unichar[2]{\textsc{u+\MakeLowercase{#1}} & \textsc{#2} & {\stix \char"#1}}
% \begin{tabular}{@{}clcl@{}}
% \toprule
% Slot & Name & Glyph & Command  \\
% \midrule
% \unichar{002F}{solidus}                 & \cs{solidus} \\
% \unichar{2044}{fraction slash}          & \cs{fracslash} \\
% \unichar{2215}{division slash}          & \cs{slash} \\
% \unichar{29F8}{big solidus}             & \cs{xsol} \\
% \midrule
% \unichar{005C}{reverse solidus}         & \cs{backslash} \\
% \unichar{2216}{set minus}               & \cs{smallsetminus} \\
% \unichar{29F5}{reverse solidus operator}& \cs{setminus} \\
% \unichar{29F9}{big reverse solidus}     & \cs{xbsol} \\
% \bottomrule
% \end{tabular}
% \end{table}
% 
% In regular \LaTeX\ we can write \cs{left}\cs{slash}\dots\cs{right}\cs{backslash}
% and so on and obtain extensible delimiter-like symbols. Not all of the unicode slashes
% are suitable for this (and do not have the font support to do it).
% 
% \paragraph{Slash}
% 
% Of \unichar{2044}{fraction slash}, TR25 says that it is:
% \begin{quote}
% \dots used to build up simple fractions in running text\dots 
% however parsers of mathematical texts should be prepared to handle fraction slash 
% when it is received from other sources.
% \end{quote}
% 
% \unichar{2215}{division slash} should be used when division is represented
% without a built-up fraction; $\pi\approx22/7$, for example.
% 
% \unichar{29F8}{big solidus} is a `big operator' (like $\sum$).
% 
% \paragraph{Backslash}
% 
% The \unichar{005C}{reverse solidus} character \cs{backslash} is used for denoting
% double cosets: $A\backslash B$. (So I'm led to believe.) 
% It may be used as a `stretchy' delimiter if supported by the font.
% 
% MathML uses \unichar{2216}{set minus} like this: $A\smallsetminus B$.\footnote{\S4.4.5.11 \url{http://www.w3.org/TR/MathML3/}}
% The \LaTeX\ command name \cs{smallsetminus} is used for backwards compatibility.
% 
% Presumably, \unichar{29F5}{reverse solidus operator} is intended to
% be used in a similar way, but it could also (perhaps?) be used to
% represent `inverse division': $\pi\approx7\mathbin{\backslash}22$.^^A
% \footnote{This is valid syntax in the Octave and Matlab programming languages,
% in which it means matrix inverse pre-multiplication. I.e., $A\mathbin{\backslash} B\equiv A^{-1}B$.}
% The \LaTeX\ name for this character is \cs{setminus}.
% 
% Finally, \unichar{29F9}{big reverse solidus} is a `big operator' (like $\sum$).
% 
% \paragraph{How to use all of these things}
% 
% Unfortunately, font support for the above characters/glyphs is rather inconsistent.
% In Cambria Math, the only slash that grows (say when writing
% \[
% \left.\left[\begin{array}{cc} a & b \\ c & d\end{array}\right]\middle\fracslash
%       \left[\begin{array}{cc} 1 & 1 \\ 1 & 0\end{array}\right] \right.\quad )
% \]
% is the \textsc{fraction slash}, which we just established above is
% sort of only supposed to be used in text.
% 
% Of the above characters, the following are allowed to be used after
% \cs{left}, \cs{middle}, and \cs{right}:
% \begin{itemize}
% \item \cs{solidus};
% \item \cs{fracslash};
% \item \cs{slash}; and,
% \item \cs{backslash} (the only reverse slash).
% \end{itemize}
% 
% However, we assume that there is only \emph{one} stretchy slash
% in the font; this is assumed by default to be \unichar{002F}{solidus}.
% Writing \cs{left/} or \cs{left}\cs{slash} or \cs{left}{fracslash}
% will all result in the same stretchy delimiter being used.
% 
% The delimiter used can be changed with the |slash-delimiter| package option.
% Allowed values are |ascii|, |frac|, and |div|, corresponding to the respective
% unicode slots.
% 
% For example: as mentioned above, Cambria Math's stretchy slash is
% \unichar{2044}{fraction slash}. When using Cambria Math, then
% \pkg{unicode-math} should be loaded with the |[slash-delimiter=frac]| option.
% (This should be a font option rather than a package option, but
% it will change soon.)
% 
% 
%
% \subsubsection{Normalising some input characters}
%
% I believe
% all variant forms should be used as legal input that is normalised to
% a consistent output glyph, because we want to be fault-tolerant in the input.
% Here are the duplicates:
% \begin{quote}\obeylines
% \unichar {251} {latin small letter alpha}
% \unichar {25B} {latin small letter epsilon}
% \unichar {263} {latin small letter gamma}
% \unichar {269} {latin small letter iota}
% \unichar {278} {latin small letter phi}
% \unichar {28A} {latin small letter upsilon}
% \unichar {190} {latin capital letter epsilon}
% \unichar {194} {latin capital letter gamma}
% \unichar {196} {latin capital letter iota}
% \unichar {1B1} {latin capital letter upsilon}
% \end{quote}
% 
% (Not yet implemented.)
%
%
% \StopEventually{\PrintIndex}
%
% \part{The \pkg{unicode-math} package}
%\iffalse
%<*package>
%\fi
% This is the package.
%    \begin{macrocode}
\ProvidesPackage{unicode-math}
  [2009/10/09 v0.4 Unicode maths in XeLaTeX]
%    \end{macrocode}
%
% \section{Things we need}
%
% \paragraph{Packages}
%    \begin{macrocode}
\RequirePackage{expl3}[2009/08/12]
\RequirePackage{xparse}[2009/08/31]
\RequirePackage{fontspec}
%    \end{macrocode}
%
% Start using \LaTeX3 --- finally!
%    \begin{macrocode}
\ExplSyntaxOn
%    \end{macrocode}
%
%
% \paragraph{Counters and conditionals}
%    \begin{macrocode}
\newcounter{um@fam}
\newif\if@um@fontspec@feature
\newif\if@um@ot@math@
\bool_new:N \l_um_init_bool
%    \end{macrocode}
% For \opt{math-style}:
%    \begin{macrocode}
\newif\if@um@literal
\newif\if@um@upGreek
\newif\if@um@upgreek
\newif\if@um@upLatin
\newif\if@um@uplatin
%    \end{macrocode}
% For \opt{bold-style}:
%    \begin{macrocode}
\newif\if@um@bfliteral
\newif\if@um@bfupGreek
\newif\if@um@bfupgreek
\newif\if@um@bfupLatin
\newif\if@um@bfuplatin
%    \end{macrocode}
% For \opt{nabla}:
%    \begin{macrocode}
\newif\if@um@upNabla
\newif\if@um@uppartial
\bool_new:N \g_um_texgreek_bool
%    \end{macrocode}
%
% \subsubsection{Alphabet unicode positions}
%
% Before we begin, let's define the positions of the various unicode
% alphabets so that our code is a little more readable.\footnote{`\textsc{u.s.v.}' stands
% for `unicode scalar value'.}
%    \begin{macrocode}
\def\um@usv@num{`\0}
\def\um@usv@upLatin{`\A}
\def\um@usv@uplatin{`\a}
\def\um@usv@upGreek{"391}
\def\um@usv@upgreek{"3B1}
\def\um@usv@itLatin{"1D434}
\def\um@usv@itlatin{"1D44E}
\def\um@usv@itGreek{"1D6E2}
\def\um@usv@itgreek{"1D6FC}
\def\um@usv@bbnum{"1D7D8}
\def\um@usv@bbLatin{"1D538}
\def\um@usv@bblatin{"1D552}
\def\um@usv@scrLatin{"1D49C}
\def\um@usv@scrlatin{"1D4B6}
\def\um@usv@frakLatin{"1D504}
\def\um@usv@fraklatin{"1D51E}
\def\um@usv@sfnum{"1D7E2}
\def\um@usv@sfupnum{"1D7E2}
\def\um@usv@sfitnum{"1D7E2}
\def\um@usv@sfupLatin{"1D5A0}
\def\um@usv@sfLatin  {"1D5A0}
\def\um@usv@sfuplatin{"1D5BA}
\def\um@usv@sflatin{"1D5BA}
\def\um@usv@sfitLatin{"1D608}
\def\um@usv@sfitlatin{"1D622}
\def\um@usv@ttnum{"1D7F6}
\def\um@usv@ttLatin{"1D670}
\def\um@usv@ttlatin{"1D68A}
%    \end{macrocode}
% Bold:
%    \begin{macrocode}
\def\um@usv@bfnum  {"1D7CE}
\def\um@usv@bfupnum{"1D7CE}
\def\um@usv@bfitnum{"1D7CE}
\def\um@usv@bfupLatin{"1D400}
\def\um@usv@bfLatin  {"1D400}
\def\um@usv@bfuplatin{"1D41A}
\def\um@usv@bflatin  {"1D41A}
\def\um@usv@bfupGreek{"1D6A8}
\def\um@usv@bfupgreek{"1D6C2}
\def\um@usv@bfGreek  {"1D6A8}
\def\um@usv@bfgreek  {"1D6C2}
\def\um@usv@bfitLatin{"1D468}
\def\um@usv@bfitlatin{"1D482}
\def\um@usv@bfitGreek{"1D71C}
\def\um@usv@bfitgreek{"1D736}
\def\um@usv@bffrakLatin{"1D56C}
\def\um@usv@bffraklatin{"1D586}
\def\um@usv@bfscrLatin{"1D4D0}
\def\um@usv@bfscrlatin{"1D4EA}
\def\um@usv@bfsfnum  {"1D7EC}
\def\um@usv@bfsfupnum{"1D7EC}
\def\um@usv@bfsfitnum{"1D7EC}
\def\um@usv@bfsfupLatin{"1D5D4}
\def\um@usv@bfsfLatin  {"1D5D4}
\def\um@usv@bfsfuplatin{"1D5EE}
\def\um@usv@bfsflatin  {"1D5EE}
\def\um@usv@bfsfupGreek{"1D756}
\def\um@usv@bfsfupgreek{"1D770}
\def\um@usv@bfsfGreek  {"1D756}
\def\um@usv@bfsfgreek  {"1D770}
\def\um@usv@bfsfitLatin{"1D63C}
\def\um@usv@bfsfitlatin{"1D656}
\def\um@usv@bfsfitGreek{"1D790}
\def\um@usv@bfsfitgreek{"1D7AA}
%    \end{macrocode}
% Greek variants:
%    \begin{macrocode}
\def\um@usv@varTheta{"3F4}
\def\um@usv@Digamma{"3DC}
\def\um@usv@varepsilon{"3F5}
\def\um@usv@vartheta{"3D1}
\def\um@usv@varkappa{"3F0}
\def\um@usv@varphi{"3D5}
\def\um@usv@varrho{"3F1}
\def\um@usv@varpi{"3D6}
\def\um@usv@digamma{"3DD}
%    \end{macrocode}
% Bold:
%    \begin{macrocode}
\def\um@usv@bfvarTheta{"1D6B9}
\def\um@usv@bfDigamma{"1D7CA}
\def\um@usv@bfvarepsilon{"1D6DC}
\def\um@usv@bfvartheta{"1D6DD}
\def\um@usv@bfvarkappa{"1D6DE}
\def\um@usv@bfvarphi{"1D6DF}
\def\um@usv@bfvarrho{"1D6E0}
\def\um@usv@bfvarpi{"1D6E1}
\def\um@usv@bfdigamma{"1D7CB}
%    \end{macrocode}
% Italic Greek variants:
%    \begin{macrocode}
\def\um@usv@ith{"210E}
\def\um@usv@itvarTheta{"1D6F3}
\def\um@usv@itvarepsilon{"1D716}
\def\um@usv@itvartheta{"1D717}
\def\um@usv@itvarkappa{"1D718}
\def\um@usv@itvarphi{"1D719}
\def\um@usv@itvarrho{"1D71A}
\def\um@usv@itvarpi{"1D71B}
%    \end{macrocode}
% Bold italic:
%    \begin{macrocode}
\def\um@usv@bfuph{"1D421}
\def\um@usv@bfith{"1D489}
\def\um@usv@bfitvarTheta{"1D72D}
\def\um@usv@bfitvarepsilon{"1D750}
\def\um@usv@bfitvartheta{"1D751}
\def\um@usv@bfitvarkappa{"1D752}
\def\um@usv@bfitvarphi{"1D753}
\def\um@usv@bfitvarrho{"1D754}
\def\um@usv@bfitvarpi{"1D755}
%    \end{macrocode}
% Nabla:
%    \begin{macrocode}
\def\um@usv@Nabla{"2207}
\def\um@usv@itNabla{"1D6FB}
\def\um@usv@bfNabla{"1D6C1}
\def\um@usv@bfitNabla{"1D735}
\def\um@usv@bfsfNabla{"1D76F}
\def\um@usv@bfsfitNabla{"1D7A9}
%    \end{macrocode}
% Partial:
%    \begin{macrocode}
\def\um@usv@partial{"2202}
\def\um@usv@itpartial{"1D715}
\def\um@usv@bfpartial{"1D6DB}
\def\um@usv@bfitpartial{"1D74F}
\def\um@usv@bfsfpartial{"1D789}
\def\um@usv@bfsfitpartial{"1D7C3}
%    \end{macrocode}
%
% \subsection{Package options}
% \pkg{xkeyval}'s package support is used here.
% I'll switch over to \pkg{l3keys2e} at some stage.
% 
% \begin{macro}{\unimathsetup}
% This macro can be used in lieu of or later to override
% options declared when the package is loaded.
%    \begin{macrocode}
\DeclareDocumentCommand \unimathsetup {m} {
  \setkeys{unicode-math.sty}{#1}
}
%    \end{macrocode}
% \end{macro}
% 
%
% \paragraph{math-style}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}
    {math-style}[\@tempa\@tempb]{iso,tex,french,upright,literal}{
  \ifcase\@tempb\relax
    \@um@upGreekfalse
    \@um@upgreekfalse
    \@um@upLatinfalse
    \@um@uplatinfalse
    \@um@bfupGreekfalse
    \@um@bfupgreekfalse
    \@um@uppartialfalse
    \@um@bfupLatinfalse
    \@um@bfuplatinfalse
    \@um@upNablafalse
    \bool_set_false:N \g_um_upsans_bool
    \bool_set_false:N \g_um_texgreek_bool
  \or
    \@um@upGreektrue
    \@um@upgreekfalse
    \@um@upLatinfalse
    \@um@uplatinfalse
    \@um@bfupGreektrue
    \@um@bfupgreekfalse
    \@um@uppartialfalse
    \@um@bfupLatintrue
    \@um@bfuplatintrue
    \@um@upNablatrue
    \bool_set_true:N \g_um_upsans_bool
    \bool_set_false:N \g_um_texgreek_bool
  \or
    \@um@upGreektrue
    \@um@upgreektrue
    \@um@upLatintrue
    \@um@uplatinfalse
    \@um@bfupGreektrue
    \@um@bfupgreektrue
    \@um@uppartialtrue
    \@um@bfupLatintrue
    \@um@bfuplatintrue
    \@um@upNablatrue
    \bool_set_true:N \g_um_upsans_bool
    \bool_set_false:N \g_um_texgreek_bool
  \or
    \@um@upGreektrue
    \@um@upgreektrue
    \@um@upLatintrue
    \@um@uplatintrue
    \@um@bfupGreektrue
    \@um@bfupgreektrue
    \@um@uppartialtrue
    \@um@bfupLatintrue
    \@um@bfuplatintrue
    \@um@upNablatrue
    \bool_set_true:N \g_um_upsans_bool
    \bool_set_false:N \g_um_texgreek_bool
  \or
    \@um@literaltrue
    \@um@bfliteraltrue
    \bool_set_true:N \g_um_sfliteral_bool
    \bool_set_false:N \g_um_texgreek_bool
  \fi
}
%    \end{macrocode}
%
% \paragraph{bold-style}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{bold-style}[\@tempa\@tempb]{iso,tex,upright,literal}{
  \ifcase\@tempb\relax
    \@um@bfupGreekfalse
    \@um@bfupgreekfalse
    \@um@bfupLatinfalse
    \@um@bfuplatinfalse
    \@um@uppartialfalse
  \or
    \@um@bfupGreektrue
    \@um@bfupgreekfalse
    \@um@bfupLatintrue
    \@um@bfuplatintrue
    \@um@uppartialfalse
  \or
    \@um@bfupGreektrue
    \@um@bfupgreektrue
    \@um@bfupLatintrue
    \@um@bfuplatintrue
    \@um@uppartialtrue
  \or
    \@um@bfliteraltrue
  \fi
}
\cs_set:Nn \um_setup_bfshapes: {
  \tl_set:Nx \um_bf_Greek_up_or_it_usv { \if@um@bfupGreek \um@usv@bfupGreek \else \um@usv@bfitGreek \fi}
  \tl_set:Nx \um_bf_greek_up_or_it_usv { \if@um@bfupgreek \um@usv@bfupgreek \else \um@usv@bfitgreek \fi}
  \tl_set:Nx \um_bf_Latin_up_or_it_usv { \if@um@bfupLatin \um@usv@bfupLatin \else \um@usv@bfitLatin \fi}
  \tl_set:Nx \um_bf_latin_up_or_it_usv { \if@um@bfuplatin \um@usv@bfuplatin \else \um@usv@bfitlatin \fi}
}
%    \end{macrocode}
%    
% \paragraph{sans-style}
%    \begin{macrocode}
\bool_new:N \g_um_upsans_bool
\bool_new:N \g_um_sfliteral_bool
\define@choicekey*{unicode-math.sty}
    {sans-style}[\@tempa\@tempb]{italic,upright,literal}{
  \ifcase\@tempb\relax
    \bool_set_false:N \g_um_upsans_bool
  \or
    \bool_set_true:N \g_um_upsans_bool
  \or
    \bool_set_true:N \g_um_sfliteral_bool
  \fi
}
\cs_set:Nn \um_setup_sfshapes: {
  \bool_if:NTF \g_um_upsans_bool {
    \tl_set:Nn \um_sf_Latin_up_or_it_usv       { \um@usv@sfLatin     }
    \tl_set:Nn \um_sf_latin_up_or_it_usv       { \um@usv@sflatin     }
    \tl_set:Nn \um_bfsf_Latin_up_or_it_usv     { \um@usv@bfsfupLatin }
    \tl_set:Nn \um_bfsf_latin_up_or_it_usv     { \um@usv@bfsfuplatin }
    \tl_set:Nn \um_bfsf_Greek_up_or_it_usv     { \um@usv@bfsfupGreek }
    \tl_set:Nn \um_bfsf_greek_up_or_it_usv     { \um@usv@bfsfupgreek }
  }{
    \tl_set:Nn \um_sf_Latin_up_or_it_usv       { \um@usv@sfitLatin   }
    \tl_set:Nn \um_sf_latin_up_or_it_usv       { \um@usv@sfitlatin   }
    \tl_set:Nn \um_bfsf_Latin_up_or_it_usv     { \um@usv@bfsfitLatin }
    \tl_set:Nn \um_bfsf_latin_up_or_it_usv     { \um@usv@bfsfitlatin }
    \tl_set:Nn \um_bfsf_Greek_up_or_it_usv     { \um@usv@bfsfitGreek }
    \tl_set:Nn \um_bfsf_greek_up_or_it_usv     { \um@usv@bfsfitgreek }
  }
}
%    \end{macrocode}
%
% \paragraph{Symbol obliqueness}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{nabla}[\@tempa\@tempb]{upright,italic}{
  \ifcase\@tempb\relax
    \@um@upNablatrue
  \or
    \@um@upNablafalse
  \fi
}
\cs_set:Nn \um_setup_nabla: {
  \if@um@upNabla
    \tl_set:Nn \um_Nabla_up_or_it_usv     { \um@usv@Nabla }
    \tl_set:Nn \um_bfNabla_up_or_it_usv   { \um@usv@bfNabla }
    \tl_set:Nn \um_bfsfNabla_up_or_it_usv { \um@usv@bfsfNabla }
  \else
    \tl_set:Nn \um_Nabla_up_or_it_usv     { \um@usv@itNabla }
    \tl_set:Nn \um_bfNabla_up_or_it_usv   { \um@usv@bfitNabla }
    \tl_set:Nn \um_bfsfNabla_up_or_it_usv { \um@usv@bfsfitNabla }
  \fi
}
%    \end{macrocode}
%
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{partial}[\@tempa\@tempb]{upright,italic}{
  \ifcase\@tempb\relax
    \@um@uppartialtrue
  \or
    \@um@uppartialfalse
  \fi
}
\cs_set:Nn \um_setup_partial: {
  \if@um@uppartial
    \tl_set:Nn \um_partial_up_or_it_usv     { \um@usv@partial }
    \tl_set:Nn \um_bfpartial_up_or_it_usv   { \um@usv@bfpartial }
    \tl_set:Nn \um_bfsfpartial_up_or_it_usv { \um@usv@bfsfpartial }
  \else
    \tl_set:Nn \um_partial_up_or_it_usv     { \um@usv@itpartial }
    \tl_set:Nn \um_bfpartial_up_or_it_usv   { \um@usv@bfitpartial }
    \tl_set:Nn \um_bfsfpartial_up_or_it_usv { \um@usv@bfsfitpartial }
  \fi
}
%    \end{macrocode}
%
% \paragraph{Epsilon and phi shapes}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{vargreek-shape}[\@tempa\@tempb]{unicode,TeX}{
  \ifcase\@tempb\relax
    \bool_set_false:N \g_um_texgreek_bool
  \or
    \bool_set_true:N \g_um_texgreek_bool
  \fi
}
%    \end{macrocode}
%    
% \paragraph{Colon style}
%    \begin{macrocode}
\bool_new:N \g_um_literal_colon_bool
\define@choicekey*{unicode-math.sty}{colon}[\@tempa\@tempb]{literal,TeX}{
  \ifcase\@tempb\relax
    \bool_set_true:N \g_um_literal_colon_bool
  \or
    \bool_set_false:N \g_um_literal_colon_bool
  \fi
}
%    \end{macrocode}
%
% \paragraph{Slash delimiter style}
%    \begin{macrocode}
\define@choicekey*{unicode-math.sty}{slash-delimiter}[\@tempa\@tempb]{ascii,frac,div}{
  \ifcase\@tempb\relax
    \tl_set:Nn \g_um_slash_delimiter_usv {"002F}
  \or
    \tl_set:Nn \g_um_slash_delimiter_usv {"2044}
  \or
    \tl_set:Nn \g_um_slash_delimiter_usv {"2215}
  \fi
}
%    \end{macrocode}
%
%
%    \begin{macrocode}
\ExecuteOptionsX{math-style=TeX,slash-delimiter=ascii}
\ProcessOptionsX
%    \end{macrocode}
%
% \subsection{Overcoming \cmd\@onlypreamble}
%
% The requirement of only setting up the maths fonts in the preamble is now removed. The following list might be overly ambitious.
%    \begin{macrocode}
\tl_map_inline:nn {
\new@mathgroup
\cdp@list
\cdp@elt
\DeclareMathSizes
\@DeclareMathSizes
\newmathalphabet
\newmathalphabet@@
\newmathalphabet@@@
\DeclareMathVersion
\define@mathalphabet
\define@mathgroup
\addtoversion
\version@list
\version@elt
\alpha@list
\alpha@elt
\restore@mathversion
\init@restore@version
\dorestore@version
\process@table
\new@mathversion
\DeclareSymbolFont
\group@list
\group@elt
\new@symbolfont
\SetSymbolFont
\SetSymbolFont@
\get@cdp
\DeclareMathAlphabet
\new@mathalphabet
\SetMathAlphabet
\SetMathAlphabet@
\DeclareMathAccent
\set@mathaccent
\DeclareMathSymbol
\set@mathchar
\set@mathsymbol
\DeclareMathDelimiter
\@xxDeclareMathDelimiter
\@DeclareMathDelimiter
\@xDeclareMathDelimiter
\set@mathdelimiter
\set@@mathdelimiter
\DeclareMathRadical
\mathchar@type
\DeclareSymbolFontAlphabet
\DeclareSymbolFontAlphabet@
}{
  \tl_remove_in:Nn \@preamblecmds {\do#1}
}
%    \end{macrocode}
%
% \subsection{Other things}
%
% \begin{macro}{\um@fontdimen@percent}
% \darg{Font dimen number}
% \cmd\fontdimen s |10|, |11|, and |65| aren't actually dimensions, they're percentage values given in units of |sp|. This macro takes a font dimension number and outputs the decimal value of the associated parameter.
% \begin{example}{}
%   \font\tmpfont="Cambria Math"
%   \um@fontdimen@percent{10}{\tmpfont}\\
%   \um@fontdimen@percent{11}{\tmpfont}\\
%   \um@fontdimen@percent{65}{\tmpfont}
% \end{example}
%    \begin{macrocode}
\def\um@fontdimen@percent#1#2{
  0.\strip@pt\dimexpr\fontdimen#1#2 *65536\relax
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@scaled@apply}
% \darg{A math style}
% \darg{Macro that takes a non-delimited length argument (like \cmd\kern)}
% \darg{Length control sequence to be scaled according to the math style}
% This macro is used to scale the lengths reported by \cmd\fontdimen\ according to the scale factor for script- and scriptscript-size objects.
%    \begin{macrocode}
\def\um@scaled@apply#1#2#3{
  \ifx#1\scriptstyle
    #2\um@fontdimen@percent{10}\um@font#3
  \else
    \ifx#1\scriptscriptstyle
      #2\um@fontdimen@percent{11}\um@font#3
    \else
      #2#3%
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \section{Fundamentals}
%
% \subsection{Enlarging the number of maths families}
%
% To start with, we've got a power of two as many \cmd\fam s as before. So (from |ltfssbas.dtx|) we want to redefine
%    \begin{macrocode}
\def\new@mathgroup{\alloc@8\mathgroup\chardef\@cclvi}
\let\newfam\new@mathgroup
%    \end{macrocode}
%
% This is sufficient for \LaTeX's \cmd\DeclareSymbolFont-type commands to be able
% to define 256 named maths fonts. Now we need a new \cmd\DeclareMathSymbol.
%
% \subsection{\cmd\DeclareMathSymbol\ for unicode ranges}
%
% This command is a bit funny at the moment; it doesn't define the actual
% macro for almost all of the symbols passed to it, but it does assign the
% \cmd\XeTeXmathchar.
%
% \begin{macro}{\um@mathsymbol}
% \darg{Symbol, \eg, \cmd\alpha}
% \darg{Type, \eg, \cmd\mathalpha}
% \darg{Math font name, \eg, \texttt{operators}}
% \darg{Slot, \eg, \texttt{"221E}}
%    \begin{macrocode}
\def \um@mathsymbol#1#2#3#4{
  \expandafter\um@set@mathsymbol\csname sym#3\endcsname#1#2{#4}}
%    \end{macrocode}
% \end{macro}
%
% The final macros that actually define the maths symbol with \XeTeX\ primitives.
%
% \begin{macro}{\um@set@mathsymbol}
% \label{mac:um@set@mathsymbol}
% \darg{Symbol font number}
% \darg{Symbol macro, \eg, \cmd\alpha}
% \darg{Type, \eg, \cmd\mathalpha}
% \darg{Slot, \eg, \texttt{"221E}}
% If the symbol definition is for a macro.
% There are a bunch of tests to perform to process the various characters.
%    \begin{macrocode}
\def\um@set@mathsymbol#1#2#3#4{
%    \end{macrocode}
% \paragraph{Operators}
% In the examples following, say we're defining for the symbol \cmd\sum ($\sum$).
%    \begin{macrocode}
  \ifx\mathop#3\relax
%    \end{macrocode}
% In order for literal unicode characters to be used in the source and still
% have the correct limits behaviour, big operators are made math-active.
%
% The active math char is defined to expand to the macro \cmd\sumop.
%    \begin{macrocode}
    \begingroup
      \char_make_active:n {#4}
      \global\mathcode#4="8000\relax
      \um@scanactivedef #4 \@nil { \csname\cs_to_str:N #2 op\endcsname }
    \endgroup
%    \end{macrocode}
% Some of these require a \cmd\nolimits\ suffix. This is controlled by the
% \cmd\um@nolimits\ macro, which contains a list of such characters.
% This list is checked dynamically because we're not interested in efficiency.
% Or something.
% This allows the list to be updated in the middle of a document.
%
% Declare the plain old mathchardef for the control sequence \cmd\sum@sym.
%    \begin{macrocode}
    \expandafter\global\expandafter\XeTeXmathchardef
      \csname\string#2@sym\endcsname
      ="\mathchar@type#3 #1 #4\relax
%    \end{macrocode}
% Now define \cmd\sumop\ as \cmd\sum@sym, followed by \cmd\nolimits\ if necessary.
%    \begin{macrocode}
    \cs_gset:cpn { \cs_to_str:N #2 op } {
      \csname\string#2@sym\endcsname
      \expandafter\in@\expandafter#2\expandafter{\um@nolimits}
      \ifin@
        \expandafter\nolimits
      \fi
    }
%    \end{macrocode}
% Don't forget that the actual \cmd\sum\ macro is simply defined in terms of
% the literal unicode symbol!
%    \begin{macrocode}
  \else
%    \end{macrocode}
% \paragraph{Radicals}
% Needs to be before the delimiters because the radical is, for some reason,
% \cmd\mathopen.
%    \begin{macrocode}
    \expandafter\in@\expandafter#2\expandafter{\um@radicals,}
    \ifin@
      \cs_gset:cpn {\cs_to_str:N #2 sign} { \XeTeXradical #1 #4 \relax }
    \else
%    \end{macrocode}
% \paragraph{Delimiters}
% TODO: sort out which of these three declarations are necessary!
% (Definitely the first, to work with \cmd\left/\cmd\right.)
%    \begin{macrocode}
      \ifx\mathopen#3\relax
        \cs_gset:Npn #2 {\XeTeXdelimiter "\mathchar@type#3 #1 #4\relax}
        \global\XeTeXdelcode#4=#1 #4\relax
        \global\XeTeXmathcode#4="\mathchar@type#3 #1 #4\relax
      \else
        \ifx\mathclose#3\relax
          \cs_gset:Npn #2 {\XeTeXdelimiter "\mathchar@type#3 #1 #4\relax}
          \global\XeTeXdelcode#4=#1 #4\relax
          \global\XeTeXmathcode#4="\mathchar@type#3 #1 #4\relax
        \else
%    \end{macrocode}
% \paragraph{Accents}
%    \begin{macrocode}
          \ifx\mathaccent#3\relax
            \cs_gset:Npx #2 {\XeTeXmathaccent "\mathchar@type#3 #1 #4\relax}
          \else
%    \end{macrocode}
% And finally, the general case.
% We define the unicode mathcode for the character.
% The macro is defined generically in terms of the unicode character.
%    \begin{macrocode}
            \global\XeTeXmathcode#4="\mathchar@type#3 #1 #4\relax
          \fi
        \fi
      \fi
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_set_mathcode:nnnn}
% [For later] or if it's for a character code (just  a wrapper around the primitive).
% Note that this declaration \emph{isn't} global so that it can be constrained by grouping
% inside math alphabet switches.
%    \begin{macrocode}
\cs_set:Nn \um_set_mathcode:nnnn {
  \XeTeXmathcode#1="\mathchar@type#2 \csname sym#3\endcsname #4\relax
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{The main \cs{setmathfont} macro}
%
% Using a |range| including large character sets such as \cmd\mathrel,
% \cmd\mathalpha, \etc, is \emph{very slow}!
% I hope to improve the performance somehow.
%
% \begin{macro}{\setmathfont}
% \doarg{font features}
% \darg{font name}
%    \begin{macrocode}
\DeclareDocumentCommand \setmathfont { O{} m } {
%    \end{macrocode}
% \begin{itemize}
% \item Erase any conception \LaTeX\ has of previously defined math symbol fonts;
% this allows \cmd\DeclareSymbolFont\ at any point in the document.
%    \begin{macrocode}
  \let\glb@currsize\relax
%    \end{macrocode}
% \item To start with, assume we're defining the font for every math symbol character.
%    \begin{macrocode}
  \bool_set_true:N \l_um_init_bool
  \seq_clear:N \l_um_char_range_seq
  \let\um@char@num@range\@empty
%    \end{macrocode}
% \item Tell \pkg{fontspec} that maths font features are actually allowed.
%    \begin{macrocode}
  \@um@fontspec@featuretrue
%    \end{macrocode}
% \item Grab the current size information
% (is this robust enough? Maybe it should be preceded by \cmd\normalsize).
%    \begin{macrocode}
  \csname S@\f@size\endcsname
%    \end{macrocode}
% \item Set the name of the math version being defined.
%       (obviously more needs to be done here!)
% \end{itemize}
%    \begin{macrocode}
  \def\um@mversion{normal}
  \DeclareMathVersion{\um@mversion}
%    \end{macrocode}
% \item Define default font features for the script and scriptscript font.
%       (This needs to be generalised so users can override it.)
%    \begin{macrocode}
  \tl_set:Nn \l_um_script_features_tl  {ScriptStyle}
  \tl_set:Nn \l_um_sscript_features_tl {ScriptScriptStyle}
  \tl_set:Nn \l_um_script_font_tl      {#2}
  \tl_set:Nn \l_um_sscript_font_tl     {#2}
%    \end{macrocode}
% Use \pkg{fontspec} to select a font to use. The macro \cmd\S@\meta{size}
% contains the definitions of the sizes used for maths letters, subscripts and subsubscripts in
% \cmd\tf@size, \cmd\sf@size, and \cmd\ssf@size, respectively.
%    \begin{macrocode}
  \setkeys*{unicode-math.sty}{#1}
  \cs_set:Npx \um_tmp: {
    \exp_not:N \setkeys*[um]{options}{\exp_not:V \XKV@rm}
  }
  \um_tmp:
  \edef\@tempa{\noexpand\zf@fontspec{
      Script = Math,
      SizeFeatures = {
        {Size = \tf@size-} ,
        {Size = \sf@size-\tf@size ,
         Font = \l_um_script_font_tl ,
         \l_um_script_features_tl
        } ,
        {Size = -\sf@size ,
         Font = \l_um_sscript_font_tl ,
         \l_um_sscript_features_tl
        }
      },
      \XKV@rm
    }{#2}
  }
  \@tempa
%    \end{macrocode}
% Probably want to check there that we're not creating multiple symbol fonts
% with the same NFSS declaration.
%
% Check for the correct number of \cs{fontdimen}s:
%    \begin{macrocode}
  \font\um@font="#2"\relax
%%  \ifdim \dimexpr\fontdimen9\um@font*65536\relax =65pt\relax
%%    \@um@ot@math@true
%%  \else
%%    \PackageWarningNoLine{unicode-math}{
%%      The~ font~ '#2' ~is~ not~ a~ valid~ OpenType~ maths~ font.~
%%      Some~ maths~ features~ will~ not~ be~ available~ or~ behave~
%%      in~ a~ substandard~ manner
%%    }
%%  \fi
%    \end{macrocode}
% If we're defining the full unicode math repetoire, then we skip all
% the parsing processing needed if we're only defining a subset.
% \begin{itemize}
% \item Math symbols are defined with \cmd\UnicodeMathSymbol; see \secref{mathsymbol}
% for the individual definitions
% \end{itemize}
%    \begin{macrocode}
  \bool_if:NTF \l_um_init_bool {
    \tl_set:Nn \um_symfont_tl {um@allsym}
    \PackageInfo{unicode-math}{Defining~ the~ default~ maths~ font~ as~ '#2'}
    \cs_set_eq:NN \UnicodeMathSymbol \um_process_symbol_noparse:nnnn
    \cs_set_eq:NN \um_mathmap:Nnn \um_mathmap_noparse:Nnn
    \cs_set_eq:NN \um_remap_symbol:nnn \um_remap_symbol_noparse:nnn
    \cs_set_eq:NN \um_maybe_init_alphabet:n \um_init_alphabet:n
  }{
    \stepcounter{um@fam}
    \tl_set:Nx \um_symfont_tl {um@fam\theum@fam}
    \cs_set_eq:NN \UnicodeMathSymbol \um_process_symbol_parse:nnnn
    \cs_set_eq:NN \um_mathmap:Nnn \um_mathmap_parse:Nnn
    \cs_set_eq:NN \um_remap_symbol:nnn \um_remap_symbol_parse:nnn
    \cs_set_eq:NN \um_maybe_init_alphabet:n \use_none:n
  }
%    \end{macrocode}
% Now defined |\um_symfont_tl| as the \LaTeX\ math font to access everything:
%    \begin{macrocode}
  \DeclareSymbolFont{\um_symfont_tl}
    {\encodingdefault}{\zf@family}{\mddefault}{\updefault}
%    \end{macrocode}
% And now we input every single maths char. See File~\ref{part:awk} for
% the source to |unicode-math.tex| which is used to create
% |unicode-math-table.tex|.
%    \begin{macrocode}
  \@input{unicode-math-table.tex}
%    \end{macrocode}
% Finally,
% \begin{itemize}
% \item Set up shapes for italic/upright or ordinary/var symbols as per package options.
% \item Remap symbols that don't take their natural mathcode
% \item Activate any symbols that need to be math-active
% \item Setup all symbols not covered by the table (mostly alphanumerics)
% \item Setup the maths alphabets (\cs{mathbf} etc.)
% \end{itemize}
%    \begin{macrocode}
  \um_setup_shapes:
  \um_remap_symbols:
  \um_setup_mathactives:
  \um_setup_delcodes:
  \um_setup_alphanum:
  \um_setup_alphabets:
%    \end{macrocode}
% End of the \cmd\setmathfont\ macro.
%    \begin{macrocode}
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cs_new:Nn \um_setup_shapes: {
  \um_setup_nabla:
  \um_setup_partial:
  \um_setup_sfshapes:
  \um_setup_bfshapes:
}
%    \end{macrocode}
%
% \subsubsection{Functions for setting up symbols with mathcodes}
% \seclabel{mathsymbol}
%
% \begin{macro}{\um_process_symbol_noparse:nnnn}
% \begin{macro}{\um_process_symbol_parse:nnnn}
% If the \feat{range} font feature has been used, then only
% a subset of the unicode glyphs are to be defined.
% See \secref{rangeproc} for the code that enables this.
%    \begin{macrocode}
\cs_set:Nn \um_process_symbol_noparse:nnnn {
  \um@mathsymbol{#2}{#3}{\um_symfont_tl}{#1}
}
%    \end{macrocode}
%    \begin{macrocode}
\cs_set:Nn \um_process_symbol_parse:nnnn {
  \um@parse@term{#1}{#2}{#3}{
    \um_process_symbol_noparse:nnnn{#1}{#2}{#3}{#4}
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\um_remap_symbols:}
% \begin{macro}{\um_remap_symbol_noparse:nnn}
% \begin{macro}{\um_remap_symbol_parse:nnn}
% This function is used to define the mathcodes for those chars which should
% be mapped to a different glyph than themselves.
%    \begin{macrocode}
\cs_new:Nn \um_remap_symbols: {
  \um_remap_symbol:nnn{`\-}{\mathbin}{"02212}% hyphen to minus
  \um_remap_symbol:nnn{`\*}{\mathbin}{"02217}% text asterisk to "centred asterisk"
  \bool_if:NF \g_um_literal_colon_bool {
    \um_remap_symbol:nnn{`\:}{\mathrel}{"02236}% colon to ratio (i.e., punct to rel)
  }
  \if@um@literal
    \um_remap_symbol:nnn {\um@usv@Nabla}{\mathord}{\um@usv@Nabla}
    \um_remap_symbol:nnn {\um@usv@itNabla}{\mathord}{\um@usv@itNabla}
    \um_remap_symbol:nnn {\um@usv@partial}{\mathord}{\um@usv@partial}
    \um_remap_symbol:nnn {\um@usv@itpartial}{\mathord}{\um@usv@itpartial}
  \else
    \um_remap_symbol:nnn {\um@usv@Nabla,\um@usv@itNabla}{\mathord}{\um_Nabla_up_or_it_usv}
    \um_remap_symbol:nnn {\um@usv@partial,\um@usv@itpartial}{\mathord}{\um_partial_up_or_it_usv}
  \fi
%    \end{macrocode}
% Some of these in the |bfliteral| block may be redundant, but that's okay:
%    \begin{macrocode}
  \if@um@bfliteral
    \um_remap_symbol:nnn {\um@usv@bfNabla      }{\mathord}{\um@usv@bfNabla}
    \um_remap_symbol:nnn {\um@usv@bfitNabla    }{\mathord}{\um@usv@bfitNabla}
    \um_remap_symbol:nnn {\um@usv@bfsfNabla    }{\mathord}{\um@usv@bfsfNabla}
    \um_remap_symbol:nnn {\um@usv@bfsfitNabla  }{\mathord}{\um@usv@bfsfitNabla}
    \um_remap_symbol:nnn {\um@usv@bfpartial    }{\mathord}{\um@usv@bfpartial}
    \um_remap_symbol:nnn {\um@usv@bfitpartial  }{\mathord}{\um@usv@bfitpartial}
    \um_remap_symbol:nnn {\um@usv@bfsfpartial  }{\mathord}{\um@usv@bfsfpartial}
    \um_remap_symbol:nnn {\um@usv@bfsfitpartial}{\mathord}{\um@usv@bfsfitpartial}
  \else
    \um_remap_symbol:nnn {\um@usv@bfNabla,\um@usv@bfitNabla}{\mathord}{\um_bfNabla_up_or_it_usv}
    \um_remap_symbol:nnn {\um@usv@bfsfNabla,\um@usv@bfsfitNabla}{\mathord}{\um_bfsfNabla_up_or_it_usv}
    \um_remap_symbol:nnn {\um@usv@bfpartial,\um@usv@bfitpartial}{\mathord}{\um_bfpartial_up_or_it_usv}
    \um_remap_symbol:nnn {\um@usv@bfsfpartial,\um@usv@bfsfitpartial}{\mathord}{\um_bfsfpartial_up_or_it_usv}
  \fi
}
%    \end{macrocode}
% \end{macro}
% Where |\um_remap_symbol:nnn| is defined to be one of these two, depending
% on the range setup:
%    \begin{macrocode}
\cs_new:Nn \um_remap_symbol_parse:nnn {
  \um@parse@term {#3} {\@nil} {#2} {
    \um_remap_symbol_noparse:nnn {#1} {#2} {#3}
  }
}
\cs_new:Nn \um_remap_symbol_noparse:nnn {
  \clist_map_inline:nn {#1} {
    \um_set_mathcode:nnnn {##1} {#2} {\um_symfont_tl} {#3}
  }
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% \subsubsection{Active math characters}
%
% There are more math active chars later in the subscript/superscript section.
% But they don't need to be able to be typeset directly.
%
% \begin{macro}{\um_setup_mathactives:}
%    \begin{macrocode}
\cs_new:Nn \um_setup_mathactives: {
  \um_make_mathactive:nNN {"2032} \primesingle \mathord
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_make_mathactive:nNN}
%: TODO : hook into range feature
% Makes |#1| a mathactive char, and gives cs |#2| the meaning of mathchar |#1|
% with class |#3|.
% You are responsible for giving active |#1| a particular meaning!
%    \begin{macrocode}
\cs_new:Nn \um_make_mathactive:nNN {
  \XeTeXmathchardef #2 = "\mathchar@type #3
                         \csname sym\um_symfont_tl\endcsname
                         #1 \scan_stop:
  \XeTeXmathcodenum #1 = "1FFFFF \scan_stop:
}
%    \end{macrocode}
% \end{macro}
% 
% \subsubsection{Delimiter codes}
% Some symbols that aren't mathopen/mathclose still need to have delimiter codes assigned.
% The list of vertical arrows may be incomplete.
% On the other hand, many fonts won't support them all being stretchy.
% \begin{macro}{\um_setup_delcodes:}
%    \begin{macrocode}
\cs_new:Nn \um_setup_delcodes: {
  \um_set_delcode:nn {`\/}   {\g_um_slash_delimiter_usv}
  \um_set_delcode:nn {"2044} {\g_um_slash_delimiter_usv} % fracslash
  \um_set_delcode:nn {"2215} {\g_um_slash_delimiter_usv} % divslash
  \um_set_delcode:n {"005C} % backslash
  \um_set_delcode:nn {`\<} {"27E8} % angle brackets with ascii notation
  \um_set_delcode:nn {`\>} {"27E9} % angle brackets with ascii notation
  \um_set_delcode:n {"2191} % up arrow
  \um_set_delcode:n {"2193} % down arrow
  \um_set_delcode:n {"2195} % updown arrow
  \um_set_delcode:n {"219F} % up arrow twohead
  \um_set_delcode:n {"21A1} % down arrow twohead
  \um_set_delcode:n {"21A5} % up arrow from bar
  \um_set_delcode:n {"21A7} % down arrow from bar
  \um_set_delcode:n {"21A8} % updown arrow from bar
  \um_set_delcode:n {"21BE} % up harpoon right
  \um_set_delcode:n {"21BF} % up harpoon left
  \um_set_delcode:n {"21C2} % down harpoon right
  \um_set_delcode:n {"21C3} % down harpoon left
  \um_set_delcode:n {"21C5} % arrows up down
  \um_set_delcode:n {"21F5} % arrows down up
  \um_set_delcode:n {"21C8} % arrows up up
  \um_set_delcode:n {"21CA} % arrows down down
  \um_set_delcode:n {"21D1} % double up arrow
  \um_set_delcode:n {"21D3} % double down arrow
  \um_set_delcode:n {"21D5} % double updown arrow
  \um_set_delcode:n {"21DE} % up arrow double stroke
  \um_set_delcode:n {"21DF} % down arrow double stroke
  \um_set_delcode:n {"21E1} % up arrow dashed
  \um_set_delcode:n {"21E3} % down arrow dashed
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_delcodes:}
%: TODO : hook into range feature
%    \begin{macrocode}
\cs_new:Nn \um_set_delcode:nn {
  \XeTeXdelcode#1 = \csname sym\um_symfont_tl\endcsname #2
}
\cs_new:Nn \um_set_delcode:n {
  \XeTeXdelcode#1 = \csname sym\um_symfont_tl\endcsname #1
}
%    \end{macrocode}
% \end{macro}
% 
% \subsubsection{Maths alphabets' character mapping}
% \seclabel{mathmap}
%
% We want it to be convenient for users to actually type in maths.
% The \ascii\ Latin characters should be used for italic maths,
% and the text Greek characters should be used for upright/italic
% (depending on preference) Greek, if desired.
%
% \begin{macro}{\um_setup_alphanum:}
% All symbols input that aren't defined directly in |unicode-math-table|.
%    \begin{macrocode}
\cs_set:Nn \um_setup_alphanum: {
  \bool_if:NTF \l_um_init_bool {
    \um_map_chars_numbers:nn {\um@usv@num}{\um@usv@num}
%    \end{macrocode}
% \paragraph{Normal weight}
%    \begin{macrocode}
    \if@um@literal
      \um_setup_literals:
    \else
      \um_setup_Latin:
      \um_setup_latin:
      \um_setup_Greek:
      \um_setup_greek:
    \fi
%    \end{macrocode}
% \paragraph{Bold}
%    \begin{macrocode}
    \if@um@bfliteral
      \um_setup_bf_literals:
    \else
      \if@um@bfupLatin
        \um_map_chars_latin:nn {\um@usv@bfupLatin,\um@usv@bfitLatin}{\um@usv@bfupLatin}
      \else
        \um_map_chars_latin:nn {\um@usv@bfupLatin,\um@usv@bfitLatin}{\um@usv@bfitLatin}
      \fi
      \if@um@bfuplatin
        \um_map_chars_latin:nn {\um@usv@bfuplatin,\um@usv@bfitlatin}{\um@usv@bfuplatin}
      \else
        \um_map_chars_latin:nn {\um@usv@bfuplatin,\um@usv@bfitlatin}{\um@usv@bfitlatin}
      \fi
      \if@um@bfupGreek
        \um_map_chars_greek:nn {\um@usv@bfupGreek,\um@usv@bfitGreek}{\um@usv@bfupGreek}
        \um_map_char:nn {\um@usv@bfvarTheta,\um@usv@bfitvarTheta}{\um@usv@bfvarTheta}
      \else
        \um_map_chars_greek:nn {\um@usv@bfupGreek,\um@usv@bfitGreek}{\um@usv@bfitGreek}
        \um_map_char:nn {\um@usv@bfvarTheta,\um@usv@bfitvarTheta}{\um@usv@bfitvarTheta}
      \fi
      \if@um@bfupgreek
        \um_map_chars_greek:nn {\um@usv@bfupgreek,\um@usv@bfitgreek}{\um@usv@bfupgreek}
        \um_map_char:nn {\um@usv@bfvarepsilon,\um@usv@bfitvarepsilon}{\um@usv@bfvarepsilon}
        \um_map_char:nn {\um@usv@bfvartheta,\um@usv@bfitvartheta}{\um@usv@bfvartheta}
        \um_map_char:nn {\um@usv@bfvarkappa,\um@usv@bfitvarkappa}{\um@usv@bfvarkappa}
        \um_map_char:nn {\um@usv@bfvarphi,\um@usv@bfitvarphi}{\um@usv@bfvarphi}
        \um_map_char:nn {\um@usv@bfvarrho,\um@usv@bfitvarrho}{\um@usv@bfvarrho}
        \um_map_char:nn {\um@usv@bfvarpi,\um@usv@bfitvarpi}{\um@usv@bfvarpi}
      \else
        \um_map_chars_greek:nn {\um@usv@bfupgreek,\um@usv@bfitgreek}{\um@usv@bfitgreek}
        \um_map_char:nn {\um@usv@bfvarepsilon,\um@usv@bfitvarepsilon}{\um@usv@bfitvarepsilon}
        \um_map_char:nn {\um@usv@bfvartheta,\um@usv@bfitvartheta}{\um@usv@bfitvartheta}
        \um_map_char:nn {\um@usv@bfvarkappa,\um@usv@bfitvarkappa}{\um@usv@bfitvarkappa}
        \um_map_char:nn {\um@usv@bfvarphi,\um@usv@bfitvarphi}{\um@usv@bfitvarphi}
        \um_map_char:nn {\um@usv@bfvarrho,\um@usv@bfitvarrho}{\um@usv@bfitvarrho}
        \um_map_char:nn {\um@usv@bfvarpi,\um@usv@bfitvarpi}{\um@usv@bfitvarpi}
      \fi
    \fi
  }{
%    \end{macrocode}
% %: TODO : what is supposed to happen here?
%    \begin{macrocode}
  }
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Functions for setting up the maths alphabets}
%
% \begin{macro}{\um_mathmap_noparse:Nnn}
% \darg{Maths alphabet, \eg, \cmd\mathbb}
% \darg{Input slot(s), \eg, the slot for `A' (comma separated)}
% \darg{Output slot, \eg, the slot for `$\mathbb{A}$'}
% Adds \cs{um_set_mathcode:nnnn} declarations to the specified maths alphabet's definition (\eg, \cmd\um@mathscr).
% Uses \cmd\um@addto@mathmap\ (below) to expand the name of the current symbol font.
%    \begin{macrocode}
\cs_set:Nn \um_mathmap_noparse:Nnn {
  \clist_map_inline:nn {#2} {
    \exp_args:No \um@addto@mathmap \um_symfont_tl {##1}{#1}{#3}
   }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_mathmap_parse:Nnn}
% \darg{Maths alphabet, \eg, \cmd\mathbb}
% \darg{Input slot(s), \eg, the slot for `A' (comma separated)}
% \darg{Output slot, \eg, the slot for `$\mathbb{A}$'}
% When \cmd\um@parse@term\ is executed, it populates the \cmd\um@char@num@range\
% macro with slot numbers corresponding to the specified range. This range is used to
% conditionally add \cs{um_set_mathcode:nnnn} declaractions to the maths alphabet definition (\eg, \cmd\um@mathscr).
%    \begin{macrocode}
\cs_set:Nn \um_mathmap_parse:Nnn {
  \clist_map_inline:Nn \um@char@num@range {
    \ifnum##1=#3\relax
      \clist_map_inline:nn {#2} {
        \exp_args:No \um@addto@mathmap \um_symfont_tl {####1}{#1}{#3}
      }
    \fi
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@addto@mathmap}
% \darg{Math symbol font, always/usually the expansion of \cs{um_symfont_tl}}
% \darg{Input slot, \eg, the slot for `A'}
% \darg{Maths alphabet, \eg, \cmd\mathbb}
% \darg{Output slot, \eg, the slot for `$\mathbb{A}$'}
% This macro is used so that \cs{um_symfont_tl} can be expanded before entering the \cmd\g@addto@macro\ command.
%    \begin{macrocode}
\newcommand\um@addto@mathmap[4]{
  \tl_put_right:cn {um_setup_\cs_to_str:N #3:} {
    \um_set_mathcode:nnnn{#2}{\mathalpha}{#1}{#4}
  }
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{(Big) operators}
%
% Turns out that \XeTeX\ is clever enough to deal with big operators for us
% automatically with \cmd\XeTeXmathchardef. Amazing!
%
% However, the limits aren't set automatically; that is, we want to define,
% a la Plain \TeX\ \etc, |\def\int{\intop\nolimits}|, so there needs to be a
% transformation from \cmd\int\ to \cmd\intop\ during the expansion of
% \cmd\UnicodeMathSymbol\ in the appropriate contexts.
%
% Following is a table of every math operator (\cmd\mathop) defined in
% |unicode-math-table.tex|, from which a subset need to be flagged for
% \cmd\nolimits\ adjustments.
% The limits behaviour as specified by \pkg{unicode-math} are shown
% (with grey 'scripts).
%
% \begingroup
% \setmathfont[SizeFeatures={
%     {Size=-10, Colour=888888},
%     {Size=10-, Colour=FF0000}}]{STIXGeneral}
% \def\UnicodeMathSymbol#1#2#3#4{\ifx\mathop#3\def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & $\displaystyle#2_0^1$ & \small\cmd#2 & \parbox[b]{6.1cm}{\raggedright\scshape#4} \\}\expandafter\@tempa\fi}
% \begin{longtable}[l]{@{}lccl@{}}
% \toprule
% \textsc{usv} & Ex. & Macro & Description \\
% \midrule
% \catcode`\%=14\input unicode-math-table.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
% \begin{macro}{\um@nolimits}
% This macro is a sequence containing those maths operators that require a
% \cmd\nolimits\ suffix.
% This list is used when processing |unicode-math-table.tex| to define such
% commands automatically (see the macro \cmd\um@set@mathsymbol\ on
% page~\pageref{mac:um@set@mathsymbol}).
% I've chosen essentially just the operators that look like integrals;
% hopefully a better mathematician can help me out here.
% I've a feeling that it's more useful \emph{not} to include the multiple
% integrals such as $\iiiint$, but that might be a matter of preference.
%    \begin{macrocode}
\def\um@nolimits{
  \@elt\int\@elt\iint\@elt\iiint\@elt\iiiint\@elt\oint\@elt\oiint\@elt\oiiint
  \@elt\intclockwise\@elt\varointclockwise\@elt\ointctrclockwise\@elt\sumint
  \@elt\intbar\@elt\intBar\@elt\fint\@elt\cirfnint\@elt\awint\@elt\rppolint
  \@elt\scpolint\@elt\npolint\@elt\pointint\@elt\sqint\@elt\intlarhk\@elt\intx
  \@elt\intcap\@elt\intcup\@elt\upint\@elt\lowint
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\addnolimits}
% This macro appends material to the macro containing the list of operators
% that don't take limits.
% See example following for usage.
% Note at present that this command must have taken effect before
% \cmd\setmathfont.
%    \begin{macrocode}
\newcommand\addnolimits[1]{
  \expandafter\def\expandafter\um@nolimits\expandafter{\um@nolimits\@elt#1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\removenolimits}
% Can this macro be given a better name?
% It removes (globally) an item from the nolimits list.
% See example following for usage.
%    \begin{macrocode}
\def\removenolimits#1{
  \begingroup
    \def\@elt##1{
      \ifx##1#1\else
        \noexpand\@elt\noexpand##1
     \fi}
    \xdef\um@nolimits{\um@nolimits}
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Radicals}
%
% The radical for square root is organised in \cmd\um@set@mathsymbol\ on
% page~\pageref{page:radical}. I think it's the only radical ever.
% (Actually, there is also \cs{cuberoot} and \cs{fourthroot}, but they don't
%  seem to behave as proper radicals.)
%
% Also, what about right-to-left square roots?
%
% \begin{macro}{\um@radicals}
% We organise radicals in the same way as nolimits-operators; that is,
% in a comma-list.
%    \begin{macrocode}
\def\um@radicals{\sqrt}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{}
%   \setmathfont{Cambria Math} 
%   \[ \sqrt[2]{1+\sqrt[3]{1+x}} \]
% \end{example}
%
% \subsection{Delimiters}
% \begin{macro}{\left}
% We redefine the primitive to be preceded by \cmd\mathopen;
% this gives much better spacing in cases such as \cmd\sin\cmd\left\dots.
% Courtesy of Frank Mittelbach:\par
% {\small\url{http://www.latex-project.org/cgi-bin/ltxbugs2html?pr=latex/3853&prlatex/3754}}
%    \begin{macrocode}
\let\left@primitive\left
\def\left{\mathopen{}\left@primitive}
%    \end{macrocode}
% \end{macro}
% No re-definition is made for \cmd\right\ because it's not
% necessary.
% 
%
% Here are all \cmd\mathopen\ characters:
% \begingroup
% \setmathfont[Colour=FF0000]{STIXGeneral}
% \let\sqrt@old\sqrt
% \def\sqrt{\sqrt@old{}}
% \renewcommand\UnicodeMathSymbol[4]{\ifx\mathopen#3\def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & $\displaystyle#2$ & \small\cmd#2 & \parbox[b]{6.1cm}{\raggedright\scshape#4} \\}\expandafter\@tempa\fi}
% \begin{longtable}[l]{@{}lccl@{}}
% \toprule
% USV & Ex. & Macro & Description \\
% \midrule
% \catcode`\%=14\input unicode-math-table.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
% And \cmd\mathclose:
% \begingroup
% \setmathfont[Colour=FF0000]{STIXGeneral}
% \renewcommand\UnicodeMathSymbol[4]{\ifx\mathclose#3\def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & $\displaystyle#2$ & \small\cmd#2 & \parbox[b]{6.1cm}{\raggedright\scshape#4} \\}\expandafter\@tempa\fi}
% \begin{longtable}[l]{@{}lccl@{}}
% \toprule
% USV & Ex. & Macro & Description \\
% \midrule
% \catcode`\%=14\input unicode-math-table.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
%
% \subsection{Maths accents}
%
% Maths accents should just work \emph{if they are available in the font}.
% \begingroup
% \setmathfont[Colour=FF0000]{Cambria Math}
% \renewcommand\UnicodeMathSymbol[4]{\ifx\mathaccent#3\def\@tempa{\scshape\MakeLowercase{u+\@gobble#1} & $\displaystyle#2 x$ & \small\cmd#2 & \parbox[b]{6.1cm}{\raggedright\scshape#4} \\}\expandafter\@tempa\fi}
% \begin{longtable}[l]{@{}lccl@{}}
% \toprule
% USV & Ex. & Macro & Description \\
% \midrule
% \catcode`\%=14\input unicode-math-table.tex
% \bottomrule
% \end{longtable}
% \endgroup
%
% \section{Font features}
%
% \begin{macro}{\um@zf@feature}
% Use the same method as \pkg{fontspec} for feature definition
% (\ie, using \pkg{xkeyval}) but with a conditional to restrict
% the scope of these features to \pkg{unicode-math} commands.
%    \begin{macrocode}
\newcommand\um@zf@feature[2]{
  \define@key[zf]{options}{#1}[]{
    \if@um@fontspec@feature
      #2
    \else
      \PackageError{fontspec/unicode-math}
        {The ‘#1’ font feature can only be used for maths fonts}
        {The feature you tried to use can only be in commands
          like \protect\setmathfont}
    \fi
  }
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{OpenType maths font features}
%    \begin{macrocode}
\um@zf@feature{ScriptStyle}{
  \zf@update@ff{+ssty=0}
}
\um@zf@feature{ScriptScriptStyle}{
  \zf@update@ff{+ssty=1}
}
%    \end{macrocode}
%
% \subsection{Script and scriptscript font options}
%    \begin{macrocode}
\define@cmdkey[um]{options}[um@]{script-features}{}
\define@cmdkey[um]{options}[um@]{sscript-features}{}
\define@cmdkey[um]{options}[um@]{script-font}{}
\define@cmdkey[um]{options}[um@]{sscript-font}{}
%    \end{macrocode}
%
% \subsection{Range processing}
% \seclabel{rangeproc}
%
% The `ALL' branch here is deprecated and happens automatically.
%    \begin{macrocode}
\define@choicekey+[um]{options}{range}[\@tempa\@tempb]{ALL}{
  \ifcase\@tempb\relax
    \bool_set_true:N \l_um_init_bool
  \fi
}{
  \bool_set_false:N \l_um_init_bool
  \seq_clear:N \l_um_char_range_seq
  \seq_clear:N \l_um_mathalph_seq
  \clist_map_inline:nn {#1} {
    \um_if_mathalph_decl:nTF {##1} {
      \seq_put_right:Nx \l_um_mathalph_seq { {\exp_not:V\l_um_tmpa_tl} {\exp_not:V\l_um_tmpb_tl} {\exp_not:V\l_um_tmpc_tl} }
    }{
      \seq_put_right:Nn \l_um_char_range_seq {##1}
    }
  }
}
\cs_generate_variant:Nn \seq_if_in:NnTF {NV}
\prg_new_conditional:Nnn \um_if_mathalph_decl:n {TF} {
  \tl_set:Nn \l_um_tmpa_tl {#1}
  \tl_set:Nn \l_um_tmpb_tl {}
  \tl_set:Nn \l_um_tmpc_tl {}
  \tl_if_in:NnT \l_um_tmpa_tl {->} {
    \exp_after:wN \um_split_arrow:w \l_um_tmpa_tl \q_nil
  }
  \tl_if_in:NnT \l_um_tmpa_tl {/} {
    \exp_after:wN \um_split_slash:w \l_um_tmpa_tl \q_nil
  }
  \seq_if_in:NVTF \g_um_mathalph_seq \l_um_tmpa_tl {
    \prg_return_true:
  }{
    \prg_return_false:
  }
}
\cs_set:Npn \um_split_arrow:w #1->#2 \q_nil {
  \tl_set:Nn \l_um_tmpa_tl {#1}
  \tl_set:Nn \l_um_tmpc_tl {#2}
}
\cs_set:Npn \um_split_slash:w #1/#2 \q_nil {
  \tl_set:Nn \l_um_tmpa_tl {#1}
  \tl_set:Nn \l_um_tmpb_tl {#2}
}
%    \end{macrocode}
%
% Pretty basic comma separated range processing.
% Donald Arseneau's \pkg{selectp} package has a cleverer technique.
%
% \begin{macro}{\um@parse@term}
% \darg{unicode character slot}
% \darg{control sequence (character macro)}
% \darg{control sequence (math type)}
% \darg{code to execute}
% This macro expands to |#4|
% if any of its arguments are contained in \cmd\l_um_char_range_seq.
% This list can contain either character ranges (for checking with |#1|) or control sequences.
% These latter can either be the command name of a specific character, \emph{or} the math
% type of one (\eg, \cmd\mathbin).
%
% Character ranges are passed to \cmd\um@parse@range, which accepts input in the form shown in \tabref{ranges}.
%
% \begin{table}[htbp]
% \centering
% \topcaption{Ranges accepted by \cmd\um@parse@range.}
% \label{tab:ranges}
% \begin{tabular}{>{\ttfamily}cc}
% \textrm{Input} & Range \\
% \hline
% x & $r=x$ \\
% x- & $r\geq x$ \\
% -y & $r\leq y$ \\
% x-y & $x \leq r \leq y$ \\
% \end{tabular}
% \end{table}
%
% Start by iterating over the commalist, ignoring empties, and initialising the scratch conditional:
%    \begin{macrocode}
\newcommand\um@parse@term[4]{
  \seq_map_variable:NNn \l_um_char_range_seq \@ii {
    \unless\ifx\@ii\@empty
      \@tempswafalse
%    \end{macrocode}
% Match to either the character macro (\cmd\alpha) or the math type (\cmd\mathbin):
%    \begin{macrocode}
      \expandafter\um@firstchar\expandafter{\@ii}
      \ifx\@tempa\um@backslash
        \expandafter\ifx\@ii#2\relax
          \@tempswatrue
        \else
          \expandafter\ifx\@ii#3\relax
            \@tempswatrue
          \fi
        \fi
%    \end{macrocode}
% Otherwise, we have a number range, which is passed to another macro:
%    \begin{macrocode}
      \else
        \expandafter\um@parse@range\@ii-\@marker-\@nil#1\@nil
      \fi
%    \end{macrocode}
% If we have a match, execute the code!
% It also populates the
% \cmd\um@char@num@range\ macro, which is used when defining
% \cmd\mathbf\ (\etc) \cmd\mathchar\ remappings.
%    \begin{macrocode}
      \if@tempswa
        \ifx\um@char@num@range\@empty
          \g@addto@macro\um@char@num@range{#1}
        \else
          \g@addto@macro\um@char@num@range{,#1}
        \fi
        #4%
      \fi
    \fi
  }
}
\def\um@firstof#1#2\@nil{#1}
\edef\um@backslash{\expandafter\um@firstof\string\string\@nil}
\def\um@firstchar#1{\edef\@tempa{\expandafter\um@firstof\string#1\@nil}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um@parse@range}
% Weird syntax.
% As shown previously in \tabref{ranges}, this macro can be passed four different input types via \cmd\um@parse@term.
%    \begin{macrocode}
\def\um@parse@range#1-#2-#3\@nil#4\@nil{
  \def\@tempa{#1}
  \def\@tempb{#2}
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r=x$ \\
% C-list input & \cmd\@ii=|X| \\
% Macro input & |\um@parse@range X-\@marker-\@nil#1\@nil| \\
% Arguments &
%     \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
%   = \texttt{\textcolor{red}{X}-\textcolor{blue}{\cmd\@marker}-\textcolor{Green}{\char`\{\char`\}}} \\
% \hline
% \end{tabular}
%    \begin{macrocode}
  \expandafter\ifx\expandafter\@marker\@tempb\relax
    \ifnum#4=#1\relax
      \@tempswatrue
    \fi
  \else
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r\geq x$ \\
% C-list input & \cmd\@ii=|X-| \\
% Macro input & |\um@parse@range X--\@marker-\@nil#1\@nil|\\
% Arguments &
%    \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
% = \texttt{\textcolor{red}{X}-\textcolor{blue}{\char`\{\char`\}}-\textcolor{Green}{\cmd\@marker-}} \\
% \hline
% \end{tabular}
%    \begin{macrocode}
    \ifx\@empty\@tempb
      \ifnum#4>\numexpr#1-1\relax
        \@tempswatrue
      \fi
    \else
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $r\leq y$ \\
% C-list input & \cmd\@ii=|-Y|  \\
% Macro input & |\um@parse@range -Y-\@marker-\@nil#1\@nil|\\
% Arguments &
%    \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
% = \texttt{\textcolor{red}{\char`\{\char`\}}-\textcolor{blue}{Y}-\textcolor{Green}{\cmd\@marker-}}\\
% \hline
% \end{tabular}
%    \begin{macrocode}
      \ifx\@empty\@tempa
        \ifnum#4<\numexpr#2+1\relax
          \@tempswatrue
        \fi
%    \end{macrocode}
% \begin{tabular}{@{}ll}
% \hline
% Range & $x \leq r \leq y$  \\
% C-list input & \cmd\@ii=|X-Y|  \\
% Macro input & |\um@parse@range X-Y-\@marker-\@nil#1\@nil|\\
% Arguments &
%     \texttt{\textcolor{red}{\char`\#1}-\textcolor{blue}{\char`\#2}-\textcolor{Green}{\char`\#3}}
% =  \texttt{\textcolor{red}{X}-\textcolor{blue}{Y}-\textcolor{Green}{\cmd\@marker-}}\\
% \hline
% \end{tabular}
%    \begin{macrocode}
      \else
        \ifnum#4>\numexpr#1-1\relax
          \ifnum#4<\numexpr#2+1\relax
            \@tempswatrue
          \fi
        \fi
      \fi
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_map_char:nn }
% \darg{Number of iterations}
% \darg{Starting input char(s)}
% \darg{Starting output char}
% Loops through character ranges setting \cmd\mathcode.
%    \begin{macrocode}
\cs_set:Nn \um_map_chars_range:nnn {
  \clist_map_variable:nNn {#2} \l_um_input_num {
    \prg_stepwise_variable:nnnNn{0}{1}{#1} \l_um_incr_num {
      \um_set_mathcode:nnnn
        {\numexpr \l_um_incr_num+ \l_um_input_num \relax}
        {\mathalpha}{\um_symfont_tl}
        {\numexpr \l_um_incr_num + #3 \relax}
    }
  }
}
\cs_set:Nn \um_map_chars_latin:nn {
  \um_map_chars_range:nnn {25}{#1}{#2}
}
\cs_set:Nn \um_map_chars_greek:nn {
  \um_map_chars_range:nnn {24}{#1}{#2}
}
\cs_set:Nn \um_map_chars_numbers:nn {
  \um_map_chars_range:nnn {9}{#1}{#2}
}
\cs_set:Nn \um_map_char:nn {
  \um_map_chars_range:nnn {0}{#1}{#2}
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\um_set_mathalphabet_char:Nnn}
% \darg{Maths alphabet}
% \darg{Input char(s)}
% \darg{Output char}
% Loops through character ranges setting \cmd\mathcode.
%    \begin{macrocode}
\cs_set:Npn \exp_args:Nnff {\::n\::f\::f\:::}
\cs_new:Nn \um_set_mathalphabet_char:Nnn {
  \clist_map_variable:nNn {#2} \l_um_input_num {
    \exp_args:Nnff \um_mathmap:Nnn {#1}
      {\number\numexpr\l_um_input_num\relax} {\number\numexpr#3\relax}
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_set_mathalph_range:Nnn}
% \oarg{Number of iterations}
% \darg{Maths alphabet}
% \darg{Starting input char(s)}
% \darg{Starting output char}
% Loops through character ranges setting \cmd\mathcode.
%    \begin{macrocode}
\cs_new:Nn \um_set_mathalph_range:nNnn {
  \clist_map_variable:nNn {#3} \l_um_input_num {
    \prg_stepwise_variable:nnnNn {0}{1}{#1} \l_um_inc_num {
      \exp_args:Nnff \um_mathmap:Nnn {#2}
        {\number\numexpr \l_um_inc_num + \l_um_input_num \relax}
        {\number\numexpr \l_um_inc_num + #4 \relax}
    }
  }
}
\cs_new:Nn \um_set_mathalphabet_numbers:Nnn {
  \um_set_mathalph_range:nNnn {9}{#1}{#2}{#3}
}
\cs_new:Nn \um_set_mathalphabet_latin:Nnn {
  \um_set_mathalph_range:nNnn {25}{#1}{#2}{#3}
}
\cs_new:Nn \um_set_mathalphabet_greek:Nnn {
  \um_set_mathalph_range:nNnn {24}{#1}{#2}{#3}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{example}{}
%   \ExplSyntaxOn
%   {\um_map_chars_range:nnn{3}{`\A,`\D}{`\B}
%   $ABCDEFG$} $ABCDEFG$
% \end{example}
%
% \subsection{Resolving Greek symbol name control sequences}
%
% \begin{macro}{\um@resolve@greek}
% This macro defines \cmd\Alpha\dots\cmd\omega\ as their corresponding
% unicode (mathematical italic) character. Remember that the mapping
% to upright or italic happens with the mathcode definitions, whereas these macros
% just stand for the literal unicode characters.
%    \begin{macrocode}
\AtBeginDocument{\um@resolve@greek}
\newcommand\um@resolve@greek{
  \def\Alpha{\mitAlpha}
  \def\Beta{\mitBeta}
  \def\Gamma{\mitGamma}
  \def\Delta{\mitDelta}
  \def\Epsilon{\mitEpsilon}
  \def\Zeta{\mitZeta}
  \def\Eta{\mitEta}
  \def\Theta{\mitTheta}
  \def\Iota{\mitIota}
  \def\Kappa{\mitKappa}
  \def\Lambda{\mitLambda}
  \def\Mu{\mitMu}
  \def\Nu{\mitNu}
  \def\Xi{\mitXi}
  \def\Omicron{\mitOmicron}
  \def\Pi{\mitPi}
  \def\Rho{\mitRho}
  \def\varTheta{\mitvarTheta}
  \def\Sigma{\mitSigma}
  \def\Tau{\mitTau}
  \def\Upsilon{\mitUpsilon}
  \def\Phi{\mitPhi}
  \def\Chi{\mitChi}
  \def\Psi{\mitPsi}
  \def\Omega{\mitOmega}
%    \end{macrocode}
% Lowercase:
%    \begin{macrocode}
  \def\alpha{\mitalpha}
  \def\beta{\mitbeta}
  \def\gamma{\mitgamma}
  \def\delta{\mitdelta}
  \def\epsilon{
    \bool_if:NTF \g_um_texgreek_bool {\mitvarepsilon}{\mitepsilon}
  }
  \def\zeta{\mitzeta}
  \def\eta{\miteta}
  \def\theta{\mittheta}
  \def\iota{\mitiota}
  \def\kappa{\mitkappa}
  \def\lambda{\mitlambda}
  \def\mu{\mitmu}
  \def\nu{\mitnu}
  \def\xi{\mitxi}
  \def\omicron{\mitomicron}
  \def\pi{\mitpi}
  \def\rho{\mitrho}
  \def\varsigma{\mitvarsigma}
  \def\sigma{\mitsigma}
  \def\tau{\mittau}
  \def\upsilon{\mitupsilon}
  \def\phi{
    \bool_if:NTF \g_um_texgreek_bool {\mitvarphi}{\mitphi}
  }
  \def\chi{\mitchi}
  \def\psi{\mitpsi}
  \def\omega{\mitomega}
  \def\varepsilon{
      \bool_if:NTF \g_um_texgreek_bool {\mitepsilon}{\mitvarepsilon}
  }
  \def\vartheta{\mitvartheta}
  \def\varkappa{\mitvarkappa}
  \def\varphi{
    \bool_if:NTF \g_um_texgreek_bool {\mitphi}{\mitvarphi}
  }
  \def\varrho{\mitvarrho}
  \def\varpi{\mitvarpi}
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Setting up the mappings}
%
% \begin{macro}{\um_setup_literals:}
%: TODO : other literal symbols
%    \begin{macrocode}
\cs_set:Nn \um_setup_literals: {
  \um_map_chars_latin:nn {\um@usv@upLatin}{\um@usv@upLatin}
  \um_map_chars_latin:nn {\um@usv@itLatin}{\um@usv@itLatin}
  \um_map_chars_latin:nn {\um@usv@itlatin}{\um@usv@itlatin}
  \um_map_char:nn {\um@usv@ith}{\um@usv@ith}
  \um_map_chars_latin:nn {\um@usv@uplatin}{\um@usv@uplatin}
  \um_map_chars_greek:nn {\um@usv@upGreek}{\um@usv@upGreek}
  \um_map_char:nn {\um@usv@varTheta}{\um@usv@varTheta}
  \um_map_chars_greek:nn {\um@usv@itGreek}{\um@usv@itGreek}
  \um_map_chars_greek:nn {\um@usv@upgreek}{\um@usv@upgreek}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_bf_literals:}
% TODO: other literal symbols
%    \begin{macrocode}
\cs_set:Nn \um_setup_bf_literals: {
  \um_map_chars_latin:nn {\um@usv@bfupLatin}{\um@usv@bfupLatin}
  \um_map_chars_latin:nn {\um@usv@bfuplatin}{\um@usv@bfuplatin}
  \um_map_chars_latin:nn {\um@usv@bfitLatin}{\um@usv@bfitLatin}
  \um_map_chars_latin:nn {\um@usv@bfitlatin}{\um@usv@bfitlatin}
  \um_map_chars_greek:nn {\um@usv@bfupGreek}{\um@usv@bfupGreek}
  \um_map_chars_greek:nn {\um@usv@bfupgreek}{\um@usv@bfupgreek}
  \um_map_chars_greek:nn {\um@usv@bfitGreek}{\um@usv@bfitGreek}
  \um_map_chars_greek:nn {\um@usv@bfitgreek}{\um@usv@bfitgreek}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_Latin:}
%    \begin{macrocode}
\cs_set:Nn \um_setup_Latin: {
  \if@um@upLatin
    \um_map_chars_latin:nn {\um@usv@upLatin,\um@usv@itLatin}{\um@usv@upLatin}  
  \else
    \um_map_chars_latin:nn {\um@usv@upLatin,\um@usv@itLatin}{\um@usv@itLatin}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_latin:}
% Don't overlook `h', which maps to \unichar{210E}{PLANCK CONSTANT}
% instead of the expected \unichar{1D455}{MATHEMATICAL ITALIC SMALL H}.
%    \begin{macrocode}
\cs_set:Nn \um_setup_latin: {
  \if@um@uplatin
    \um_map_chars_latin:nn {\um@usv@uplatin,\um@usv@itlatin}{\um@usv@uplatin}
    \um_map_char:nn {\um@usv@ith}{`\h}
  \else
    \um_map_chars_latin:nn {\um@usv@uplatin,\um@usv@itlatin}{\um@usv@itlatin}
    \um_map_char:nn {`\h,\um@usv@ith}{\um@usv@ith}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_Greek:}
%    \begin{macrocode}
\cs_set:Nn \um_setup_Greek: {
  \if@um@upGreek
    \um_map_chars_greek:nn {\um@usv@upGreek,\um@usv@itGreek}{\um@usv@upGreek}
    \um_map_char:nn {\um@usv@varTheta,"1D6F3}{\um@usv@varTheta}
  \else
    \um_map_chars_greek:nn {\um@usv@upGreek,\um@usv@itGreek}{\um@usv@itGreek}
    \um_map_char:nn {\um@usv@varTheta}{\um@usv@itvarTheta}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_greek:}
%    \begin{macrocode}
\cs_set:Nn \um_setup_greek: {
  \if@um@upgreek
    \um_map_chars_greek:nn {\um@usv@upgreek,\um@usv@itgreek}{\um@usv@upgreek}
    \um_map_char:nn {\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@varepsilon}
    \um_map_char:nn {\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@vartheta}
    \um_map_char:nn {\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@varkappa}
    \um_map_char:nn {\um@usv@varphi,\um@usv@itvarphi}{\um@usv@varphi}
    \um_map_char:nn {\um@usv@varrho,\um@usv@itvarrho}{\um@usv@varrho}
    \um_map_char:nn {\um@usv@varpi,\um@usv@itvarpi}{\um@usv@varpi}
  \else
    \um_map_chars_greek:nn {\um@usv@upgreek,\um@usv@itgreek}{\um@usv@itgreek}
    \um_map_char:nn {\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@itvarepsilon}
    \um_map_char:nn {\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@itvartheta}
    \um_map_char:nn {\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@itvarkappa}
    \um_map_char:nn {\um@usv@varphi,\um@usv@itvarphi}{\um@usv@itvarphi}
    \um_map_char:nn {\um@usv@varrho,\um@usv@itvarrho}{\um@usv@itvarrho}
    \um_map_char:nn {\um@usv@varpi,\um@usv@itvarpi}{\um@usv@itvarpi}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \section{Maths alphabets mapping definitions}\label{part:mathmap}
%
% Algorithm for setting alphabet fonts.
% By default, when |range| is empty, we are in \emph{implicit} mode.
% If |range| contains the name of the math alphabet, we are in \emph{explicit}
% mode and do things slightly differently.
% 
% Implicit mode:
% \begin{itemize}
% \item Try and set all of the alphabet shapes.
% \item Check for the first glyph of the uppercase Latin alphabet to detect if the font supports each
%       alphabet shape.
%       (This doesn't work to distinguish Latin/Greek but we hope all maths
%       fonts will have at least them!)
% \item For alphabets that do exist, overwrite whatever's already there.
% \item For alphabets that are not supported, \emph{do nothing}.
%       (This includes leaving the old alphabet definition in place.)
% \end{itemize}
% 
% Explicit mode:
% \begin{itemize}
% \item Only set the alphabets specified.
% \item Check for the first glyph of the alphabet to detect if the font contains
%       the alphabet shape in the unicode math plane.
% \item For unicode math alphabets, overwrite whatever's already there.
% \item Otherwise, use the \ascii\ letters instead.
% \end{itemize}
%
% This is every math alphabet known to \pkg{unicode-math}:
% \begin{macro}{\g_um_mathalph_seq}
%    \begin{macrocode}
\seq_clear:N \g_um_mathalph_seq
\tl_map_inline:nn {
  \mathup\mathit
  \mathbb\mathscr\mathfrak\mathtt
  \mathsf\mathsfup\mathsfit
  \mathbf\mathbfup\mathbfit
  \mathbfscr\mathbffrak
  \mathbfsf\mathbfsfup\mathbfsfit
}{
  \seq_put_right:Nn \g_um_mathalph_seq {#1}
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\um_setup_alphabets:}
%    \begin{macrocode}
\cs_new:Nn \um_setup_alphabets: {
  \um_setup_math_alphabet:nn {up    }{latin,Latin,greek,Greek}
  \um_setup_math_alphabet:nn {it    }{latin,Latin,greek,Greek}
  \um_setup_math_alphabet:nn {bb    }{latin,Latin,num}
  \um_setup_math_mapping:n   {bb    }
  \um_maybe_init_alphabet:n  {bbit  }
  \um_setup_math_mapping:n   {bbit  }
  \um_setup_math_alphabet:nn {scr   }{latin,Latin}
  \um_setup_math_alphabet:nn {frak  }{latin,Latin}
  \um_setup_math_alphabet:nn {sf    }{latin,Latin,num}
  \um_setup_math_alphabet:nn {sfup  }{latin,Latin,num}
  \um_setup_math_alphabet:nn {sfit  }{latin,Latin,num}
  \um_setup_math_alphabet:nn {tt    }{latin,Latin,num}
  \um_setup_math_alphabet:nn {bf    }{latin,Latin,greek,Greek,num}
  \um_setup_math_alphabet:nn {bfup  }{latin,Latin,greek,Greek,num}
  \um_setup_math_alphabet:nn {bfit  }{latin,Latin,greek,Greek,num}
  \um_setup_math_alphabet:nn {bfscr }{latin,Latin}
  \um_setup_math_alphabet:nn {bffrak}{latin,Latin}
  \um_setup_math_alphabet:nn {bfsf  }{latin,Latin,greek,Greek,num}
  \um_setup_math_alphabet:nn {bfsfup}{latin,Latin,greek,Greek,num}
  \um_setup_math_alphabet:nn {bfsfit}{latin,Latin,greek,Greek,num}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_setup_math_alphabet:nn}
% \darg{Math font family name (e.g., `sf')}
% \darg{Math alphabets, comma separated of \{latin,Latin,greek,Greek,num\}}
% First check that at least one of the alphabets for the font shape is defined, and then
% then loop through them defining the individual ranges.
%    \begin{macrocode}
\cs_new:Nn \um_setup_math_alphabet:nn {
  \clist_map_inline:nn {#2} {
    \um_glyph_if_exist:nT {\csname um@usv@#1##1 \endcsname}{
      \um_maybe_init_alphabet:n {#1}
      \clist_map_break:
    }
  }
  \clist_map_inline:nn {#2} {
    \um_glyph_if_exist:nTF {\csname um@usv@#1##1 \endcsname}{
      \use:c {um_config_math#1_##1:}
    }{
      \PackageWarningNoLine{unicode-math}{^^J\space\space\space\space
      Math~ alphabet~
      \@backslashchar math#1~
      (\tl_use:c{g_um_math_alphabet_name_##1_tl})~
      not~ found~ in~ font~
      \fontname\um@font}
    }
  }
}
\tl_set:Nn \g_um_math_alphabet_name_latin_tl {Latin, lowercase}
\tl_set:Nn \g_um_math_alphabet_name_Latin_tl {Latin, uppercase}
\tl_set:Nn \g_um_math_alphabet_name_greek_tl {Greek, lowercase}
\tl_set:Nn \g_um_math_alphabet_name_Greek_tl {Greek, uppercase}
\tl_set:Nn \g_um_math_alphabet_name_num_tl   {Numerals}
\cs_new:Nn \um_setup_math_mapping:n {
  \cs_if_exist:cT {um_setup_math#1:} {
    \use:c {um_config_math#1_misc:}
  }
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\cs_set:Nn \um_init_alphabet:n {
  \um_prepare_alph:n {#1}
  \cs_set_eq:cN {um_setup_math#1:} \prg_do_nothing:
}
%    \end{macrocode}
%
% \begin{macro}{\um_glyph_if_exist:nTF}
%: TODO: Generalise for arbitrary fonts! \cs{um@font} is not always the one used for a specific glyph!!
%    \begin{macrocode}
\prg_new_conditional:Nnn \um_glyph_if_exist:n {p,TF,T,F} {
  \etex_iffontchar:D \um@font #1 \scan_stop: \prg_return_true: \else: \prg_return_false: \fi:
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\um_prepare_alph:n}
% If |\mathXY| hasn't been (re-)declared yet, then define it in terms of
% unicode-math defintions. Use \cs{bgroup}/\cs{egroup} so s'scripts scan the whole thing.
%    \begin{macrocode}
\cs_new:Nn \um_prepare_alph:n {
  \cs_if_exist:cF {um_math#1:n} {
    \cs_set:cpn {um_math#1:n} ##1 {
      \use:c {um_setup_math#1:} ##1 \egroup
    }
    \cs_set_protected:cpn {math#1} {
      \bgroup 
      \mode_if_math:F {
        \egroup\expandafter
        \non@alpherr\expandafter{\csname math#1\endcsname\space}
      }
      \use:c {um_math#1:n}
    }
  }
}
%    \end{macrocode}
% \end{macro}
%
%: TODO : nested alphabets?
%
% \subsection{Non-bold math alphabets}
%
% \subsubsection{Upright: \cmd\mathup}
%
% Takes both upright and italic characters to be typeset as upright symbols.
%
%    \begin{macrocode}
\cs_new:Npn \um_config_mathup_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathup}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@upLatin}
}
\cs_new:Npn \um_config_mathup_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathup}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@uplatin}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@ith} {`\h}
}
\cs_new:Npn \um_config_mathup_Greek: {
  \um_set_mathalphabet_greek:Nnn{\mathup}{\um@usv@upGreek,\um@usv@itGreek}{\um@usv@upGreek}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@Nabla}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@varTheta}
}
\cs_new:Npn \um_config_mathup_greek: {
  \um_set_mathalphabet_greek:Nnn{\mathup}{\um@usv@upgreek,\um@usv@itgreek}{\um@usv@upgreek}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@partial,\um@usv@itpartial}{\um@usv@partial}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@varepsilon}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@vartheta}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@varkappa}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@varphi}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@varrho}
  \um_set_mathalphabet_char:Nnn{\mathup}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@varpi}
}
%    \end{macrocode}
%
% \subsubsection{Italic: \cmd\mathit}
%
%    \begin{macrocode}
\cs_new:Npn \um_config_mathit_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathit}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@itLatin}
}
\cs_new:Npn \um_config_mathit_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathit}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@itlatin}
  \um_set_mathalphabet_char:Nnn{\mathit}{`\h,\um@usv@ith}{\um@usv@ith}
}
\cs_new:Npn \um_config_mathit_Greek: {
  \um_set_mathalphabet_greek:Nnn{\mathit}{\um@usv@upGreek,\um@usv@itGreek}{\um@usv@itGreek}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@itvarTheta}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@itNabla}
}
\cs_new:Npn \um_config_mathit_greek: {
  \um_set_mathalphabet_greek:Nnn{\mathit}{\um@usv@upgreek,\um@usv@itgreek}{\um@usv@itgreek}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@partial,\um@usv@itpartial}{\um@usv@itpartial}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@itvarepsilon}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@itvartheta}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@itvarkappa}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@itvarphi}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@itvarrho}
  \um_set_mathalphabet_char:Nnn{\mathit}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@itvarpi}
}
%    \end{macrocode}
%
% \subsubsection{Blackboard or double-struck: \cmd\mathbb\ and \cmd\mathbbit}
% 
%: TODO : make bbit work with literal input?
%
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbb_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbb}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bblatin}
  \um_set_mathalphabet_char:Nnn{\mathbb}{\um@usv@ith} {"1D559}
}
\cs_new:Npn \um_config_mathbb_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbb}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bbLatin}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\C,"1D436}{"2102}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\H,"1D43B}{"210D}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\N,"1D441}{"2115}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\P,"1D443}{"2119}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\Q,"1D444}{"211A}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\R,"1D445}{"211D}
  \um_set_mathalphabet_char:Nnn{\mathbb}{`\Z,"1D44D} {"2124}
}
\cs_new:Npn \um_config_mathbb_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathbb}{\um@usv@num}{\um@usv@bbnum}
}
\cs_new:Npn \um_config_mathbb_misc: {
  \um_set_mathalphabet_char:Nnn \mathbb {"03A0,"1D6F1}{"213F} % Pi
  \um_set_mathalphabet_char:Nnn \mathbb {"03C0,"1D70B}{"213C} % pi
  \um_set_mathalphabet_char:Nnn \mathbb {"0393,"1D6E4}{"213E} % Gamma
  \um_set_mathalphabet_char:Nnn \mathbb {"03B3,"1D6FE}{"213D} % gamma
  \um_set_mathalphabet_char:Nnn \mathbb {"2211}{"2140} % summation
}
\cs_new:Npn \um_config_mathbbit_misc: {
  \um_set_mathalphabet_char:Nnn \mathbbit {`\D,"1D437}{"2145}
  \um_set_mathalphabet_char:Nnn \mathbbit {`\d,"1D451}{"2146}
  \um_set_mathalphabet_char:Nnn \mathbbit {`\e,"1D452}{"2147}
  \um_set_mathalphabet_char:Nnn \mathbbit {`\i,"1D456}{"2148}
  \um_set_mathalphabet_char:Nnn \mathbbit {`\j,"1D457}{"2149}
}
%    \end{macrocode}
%
% \subsubsection{Script or caligraphic: \cmd\mathscr\ and \cmd\mathcal}
%
%    \begin{macrocode}
\cs_new:Npn \um_config_mathscr_Latin: {
  \um_set_mathalphabet_latin:Nnn  \mathscr {\um@usv@upLatin,\um@usv@itLatin}{\um@usv@scrLatin}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\B,"1D435}{"212C}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\E,"1D438}{"2130}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\F,"1D439}{"2131}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\H,"1D43B}{"210B}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\I,"1D43C}{"2110}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\L,"1D43F}{"2112}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\M,"1D440}{"2133}
  \um_set_mathalphabet_char:Nnn  \mathscr {`\R,"1D445}{"211B}
}
\cs_new:Npn \um_config_mathscr_latin: {
  \um_set_mathalphabet_latin:Nnn \mathscr {\um@usv@uplatin,\um@usv@itlatin}{\um@usv@scrlatin}
  \um_set_mathalphabet_char:Nnn \mathscr {`\e,"1D452}{"212F}
  \um_set_mathalphabet_char:Nnn \mathscr {`\g,"1D454}{"210A}
  \um_set_mathalphabet_char:Nnn \mathscr {`\o,"1D45C}{"2134}
  \um_set_mathalphabet_char:Nnn \mathscr {\um@usv@ith} {"1D4BD}
}
%    \end{macrocode}
%
% \subsubsection{Fractur or fraktur or blackletter: \cmd\mathfrak}
%
%    \begin{macrocode}
\cs_new:Npn \um_config_mathfrak_Latin: {
  \um_set_mathalphabet_latin:Nnn  \mathfrak {\um@usv@upLatin,\um@usv@itLatin}{\um@usv@frakLatin}
  \um_set_mathalphabet_char:Nnn  \mathfrak {`\C,"1D436}{"212D}
  \um_set_mathalphabet_char:Nnn  \mathfrak {`\H,"1D43B}{"210C}
  \um_set_mathalphabet_char:Nnn  \mathfrak {`\I,"1D43C}{"2111}
  \um_set_mathalphabet_char:Nnn  \mathfrak {`\R,"1D445}{"211C}
  \um_set_mathalphabet_char:Nnn  \mathfrak {`\Z,"1D44D}{"2128}
}
\cs_new:Npn \um_config_mathfrak_latin: {
  \um_set_mathalphabet_latin:Nnn \mathfrak {\um@usv@uplatin,\um@usv@itlatin}{\um@usv@fraklatin}
  \um_set_mathalphabet_char:Nnn \mathfrak {\um@usv@ith} {"1D525}
}
%    \end{macrocode}
%
% \subsubsection{Sans serif: \cmd\mathsf}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathsf_Latin: {
  \bool_if:NTF \g_um_sfliteral_bool {
    \um_set_mathalphabet_latin:Nnn{\mathsf}{\um@usv@upLatin}{\um@usv@sfupLatin}
    \um_set_mathalphabet_latin:Nnn{\mathsf}{\um@usv@itLatin}{\um@usv@sfitLatin}
  }{
    \um_set_mathalphabet_latin:Nnn   \mathsf {\um@usv@upLatin,\um@usv@itLatin}{ \um_sf_Latin_up_or_it_usv }
  }
}
\cs_new:Npn \um_config_mathsf_latin: {
  \bool_if:NTF \g_um_sfliteral_bool {
    \um_set_mathalphabet_latin:Nnn{\mathsf}{\um@usv@uplatin}{\um@usv@sfuplatin}
    \um_set_mathalphabet_latin:Nnn{\mathsf}{\um@usv@itlatin}{\um@usv@sfitlatin}
    \um_set_mathalphabet_char:Nnn \mathsf {\um@usv@ith} {"1D629}
  }{
    \um_set_mathalphabet_latin:Nnn   \mathsf {\um@usv@uplatin,\um@usv@itlatin}{ \um_sf_latin_up_or_it_usv }
    \bool_if:NTF \g_um_upsans_bool {
      \um_set_mathalphabet_char:Nnn   \mathsf {\um@usv@ith} {"1D5C1}
    }{
      \um_set_mathalphabet_char:Nnn   \mathsf {\um@usv@ith} {"1D629}
    }
  }
}
\cs_new:Npn \um_config_mathsf_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathsf}{\um@usv@num}{\um@usv@sfnum}
}
%    \end{macrocode}
%
% \subsubsection{Sans serif upright: \cmd\mathsfup}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathsfup_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathsfup}{\um@usv@num}{\um@usv@sfnum}
}
\cs_new:Npn \um_config_mathsfup_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathsfup}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@sfuplatin}
  \um_set_mathalphabet_char:Nnn \mathsfup {\um@usv@ith} {"1D5C1}
}
\cs_new:Npn \um_config_mathsfup_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathsfup}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@sfupLatin}
}
%    \end{macrocode}
%
% \subsubsection{Sans serif italic: \cmd\mathsfit}
% Map the numbers like that because it seems sensible.
%    \begin{macrocode}
\cs_new:Npn \um_config_mathsfit_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathsfit}{\um@usv@num}{\um@usv@sfnum}
}
\cs_new:Npn \um_config_mathsfit_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathsfit}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@sfitLatin}
}
\cs_new:Npn \um_config_mathsfit_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathsfit}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@sfitlatin}
  \um_set_mathalphabet_char:Nnn \mathsfit {\um@usv@ith} {"1D629}
}
%    \end{macrocode}
%
% \subsubsection{Typewriter or monospaced: \cmd\mathtt}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathtt_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathtt}{\um@usv@num}{\um@usv@ttnum}
}
\cs_new:Npn \um_config_mathtt_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathtt}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@ttLatin}
}
\cs_new:Npn \um_config_mathtt_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathtt}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@ttlatin}
  \um_set_mathalphabet_char:Nnn \mathtt {\um@usv@ith} {"1D691}
}
%    \end{macrocode}
%
% \subsection{Bold math alphabets}
% \seclabel{bfmathmap}
%
% \subsubsection{Bold: \cmd\mathbf}
%
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbf_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathbf}{\um@usv@num}{\um@usv@bfnum}
}
\cs_new:Npn \um_config_mathbf_Latin: {
  \if@um@bfliteral
    \um_set_mathalphabet_latin:Nnn{\mathbf}{\um@usv@upLatin}{\um@usv@bfupLatin}
    \um_set_mathalphabet_latin:Nnn{\mathbf}{\um@usv@itLatin}{\um@usv@bfitLatin}
  \else
    \um_set_mathalphabet_latin:Nnn{\mathbf}{\um@usv@upLatin,\um@usv@itLatin}{\um_bf_Latin_up_or_it_usv}
  \fi
}
\cs_new:Npn \um_config_mathbf_latin: {
  \if@um@bfliteral
    \um_set_mathalphabet_latin:Nnn{\mathbf}{\um@usv@uplatin}{\um@usv@bfuplatin}
    \um_set_mathalphabet_latin:Nnn{\mathbf}{\um@usv@itlatin}{\um@usv@bfitlatin}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@ith}{\um@usv@bfith}
  \else
    \um_set_mathalphabet_latin:Nnn{\mathbf}{\um@usv@uplatin,\um@usv@itlatin}{\um_bf_latin_up_or_it_usv}
    \if@um@bfuplatin
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@ith}{\um@usv@bfuph}
    \else
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@ith}{\um@usv@bfith}
    \fi
  \fi
}
\cs_new:Npn \um_config_mathbf_Greek: {
  \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@Digamma}{\um@usv@bfDigamma}
  \if@um@bfliteral
    \um_set_mathalphabet_greek:Nnn{\mathbf}{\um@usv@upGreek}{\um@usv@bfupGreek}
    \um_set_mathalphabet_greek:Nnn{\mathbf}{\um@usv@itGreek}{\um@usv@bfitGreek}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varTheta}{\um@usv@bfvarTheta}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvarTheta}{\um@usv@bfitvarTheta}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@Nabla}{\um@usv@bfNabla}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itNabla}{\um@usv@bfitNabla}
  \else
    \um_set_mathalphabet_greek:Nnn{\mathbf}{\um@usv@upGreek,\um@usv@itGreek}{\um_bf_Greek_up_or_it_usv}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@Nabla,\um@usv@itNabla}{\um_bfNabla_up_or_it_usv}
    \if@um@bfupGreek
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@bfvarTheta}
    \else
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@bfitvarTheta}
    \fi
  \fi
}
\cs_new:Npn \um_config_mathbf_greek: {
  \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@digamma}{\um@usv@bfdigamma}
  \if@um@bfliteral
    \um_set_mathalphabet_greek:Nnn{\mathbf}{\um@usv@upgreek}{\um@usv@bfupgreek}
    \um_set_mathalphabet_greek:Nnn{\mathbf}{\um@usv@itgreek}{\um@usv@bfitgreek}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@partial}{\um@usv@bfpartial}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varepsilon}{\um@usv@bfvarepsilon}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@vartheta}{\um@usv@bfvartheta}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varkappa}{\um@usv@bfvarkappa}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varphi}{\um@usv@bfvarphi}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varrho}{\um@usv@bfvarrho}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varpi}{\um@usv@bfvarpi}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itpartial}{\um@usv@bfitpartial}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvarepsilon}{\um@usv@bfitvarepsilon}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvartheta}{\um@usv@bfitvartheta}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvarkappa}{\um@usv@bfitvarkappa}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvarphi}{\um@usv@bfitvarphi}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvarrho}{\um@usv@bfitvarrho}
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@itvarpi}{\um@usv@bfitvarpi}
  \else
    \um_set_mathalphabet_greek:Nnn{\mathbf}{\um@usv@upgreek,\um@usv@itgreek}{\um_bf_greek_up_or_it_usv}
    \if@um@bfupgreek
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@bfvarepsilon}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@bfvartheta}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@bfvarkappa}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@bfvarphi}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@bfvarrho}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@bfvarpi}
    \else
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@bfitvarepsilon}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@bfitvartheta}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@bfitvarkappa}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@bfitvarphi}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@bfitvarrho}
      \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@bfitvarpi}
    \fi
    \um_set_mathalphabet_char:Nnn{\mathbf}{\um@usv@partial,\um@usv@itpartial}{\um_bfpartial_up_or_it_usv}
  \fi
}
%    \end{macrocode}
%
%
%
% \subsubsection{Bold Italic: \cmd\mathbfit}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbfit_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathbfit}{\um@usv@num}{\um@usv@bfnum}
}
\cs_new:Npn \um_config_mathbfit_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfit}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bfitLatin}
}
\cs_new:Npn \um_config_mathbfit_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfit}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bfitlatin}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@ith} {"1D489}
}
\cs_new:Npn \um_config_mathbfit_Greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfit}{\um@usv@upGreek,\um@usv@itGreek}{\um@usv@bfitGreek}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@bfitvarTheta}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@bfitNabla}
}
\cs_new:Npn \um_config_mathbfit_greek: {
  \um_set_mathalphabet_latin:Nnn{\mathbfit}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bfitLatin}
  \um_set_mathalphabet_greek:Nnn{\mathbfit}{\um@usv@upgreek,\um@usv@itgreek}{\um@usv@bfitgreek}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@partial,\um@usv@itpartial}{\um@usv@bfitpartial}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@bfitvarepsilon}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@bfitvartheta}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@bfitvarkappa}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@bfitvarphi}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@bfitvarrho}
  \um_set_mathalphabet_char:Nnn{\mathbfit}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@bfitvarpi}
}
%    \end{macrocode}
%
%
% \subsubsection{Bold Italic: \cmd\mathbfup}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbfup_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathbfup}{\um@usv@num}{\um@usv@bfnum}
}
\cs_new:Npn \um_config_mathbfup_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfup}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bfupLatin}
}
\cs_new:Npn \um_config_mathbfup_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfup}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bfuplatin}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@ith} {"1D421}
}
\cs_new:Npn \um_config_mathbfup_Greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfup}{\um@usv@upGreek,\um@usv@itGreek}{\um@usv@bfupGreek}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@varTheta,\um@usv@itvarTheta}{\um@usv@bfvarTheta}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@bfNabla}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@Digamma}{\um@usv@bfDigamma}
}
\cs_new:Npn \um_config_mathbfup_greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfup}{\um@usv@upgreek,\um@usv@itgreek}{\um@usv@bfupgreek}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@partial,\um@usv@itpartial}{\um@usv@bfpartial}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@varepsilon,\um@usv@itvarepsilon}{\um@usv@bfvarepsilon}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@vartheta,\um@usv@itvartheta}{\um@usv@bfvartheta}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@varkappa,\um@usv@itvarkappa}{\um@usv@bfvarkappa}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@varphi,\um@usv@itvarphi}{\um@usv@bfvarphi}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@varrho,\um@usv@itvarrho}{\um@usv@bfvarrho}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@varpi,\um@usv@itvarpi}{\um@usv@bfvarpi}
  \um_set_mathalphabet_char:Nnn{\mathbfup}{\um@usv@digamma}{\um@usv@bfdigamma}
}
%    \end{macrocode}
%
% \subsubsection{Bold fractur or fraktur or blackletter: \cmd\mathbffrak}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbffrak_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbffrak}{\um@usv@upLatin, \um@usv@itLatin}{\um@usv@bffrakLatin}
}
\cs_new:Npn \um_config_mathbffrak_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbffrak}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bffraklatin}
  \um_set_mathalphabet_char:Nnn{\mathbffrak}{\um@usv@ith} {"1D58D}
}
%    \end{macrocode}
%
% \subsubsection{Bold script or calligraphic: \cmd\mathbfscr}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbfscr_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfscr}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bfscrLatin}
}
\cs_new:Npn \um_config_mathbfscr_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfscr}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bfscrlatin}
  \um_set_mathalphabet_char:Nnn{\mathbfscr}{\um@usv@ith} {"1D4F1}
}
%    \end{macrocode}
%
% \subsubsection{Bold sans serif: \cmd\mathbfsf}
% These use the |sans-style| settings rather than |bold-style|.
% Numbers (always upright) and letters:
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbfsf_num: {
  \um_set_mathalphabet_numbers:Nnn \mathbfsf {\um@usv@num}{\um@usv@bfsfnum}
}
\cs_new:Npn \um_config_mathbfsf_Latin: {
  \bool_if:NTF \g_um_sfliteral_bool {
    \um_set_mathalphabet_latin:Nnn   \mathbfsf {\um@usv@upLatin}{\um@usv@bfsfupLatin}
    \um_set_mathalphabet_latin:Nnn   \mathbfsf {\um@usv@itLatin}{\um@usv@bfsfitLatin}
  }{
    \um_set_mathalphabet_latin:Nnn   \mathbfsf {\um@usv@upLatin,\um@usv@itLatin}{\um_bfsf_Latin_up_or_it_usv}
  }
}
\cs_new:Npn \um_config_mathbfsf_latin: {
  \bool_if:NTF \g_um_sfliteral_bool {
    \um_set_mathalphabet_latin:Nnn   \mathbfsf {\um@usv@uplatin}{\um@usv@bfsfuplatin}
    \um_set_mathalphabet_latin:Nnn   \mathbfsf {\um@usv@itlatin}{\um@usv@bfsfitlatin}
    \um_set_mathalphabet_char:Nnn \mathbfsf{\um@usv@ith} {"1D65D}
  }{
    \um_set_mathalphabet_latin:Nnn   \mathbfsf {\um@usv@upLatin,\um@usv@itLatin}{\um_bfsf_latin_up_or_it_usv}
    \bool_if:NTF \g_um_upsans_bool {
      \um_set_mathalphabet_char:Nnn \mathbfsf{\um@usv@ith} {"1D5F5}
    }{
      \um_set_mathalphabet_char:Nnn \mathbfsf{\um@usv@ith} {"1D65D}
    }
  }
}
\cs_new:Npn \um_config_mathbfsf_Greek: {
  \bool_if:NTF \g_um_sfliteral_bool {
    \um_set_mathalphabet_greek:Nnn   \mathbfsf {\um@usv@upGreek}{\um@usv@bfsfupGreek}
    \um_set_mathalphabet_greek:Nnn   \mathbfsf {\um@usv@itGreek}{\um@usv@bfsfitGreek}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varTheta}{"1D767}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varTheta}{"1D7A1}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@Nabla}{\um@usv@bfsfNabla}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itNabla}{\um@usv@bfsfitNabla}
  }{
    \um_set_mathalphabet_greek:Nnn   \mathbfsf {\um@usv@upGreek,\um@usv@itGreek}{\um_bfsf_Greek_up_or_it_usv}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@Nabla,\um@usv@itNabla}{\um_bfsfNabla_up_or_it_usv}
    \bool_if:NTF \g_um_upsans_bool {
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varTheta,\um@usv@itvarTheta}{"1D767}
    }{
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varTheta,\um@usv@itvarTheta}{"1D7A1}
    }
  }
}
\cs_new:Npn \um_config_mathbfsf_greek: {
  \bool_if:NTF \g_um_sfliteral_bool {
    \um_set_mathalphabet_greek:Nnn   \mathbfsf {\um@usv@upgreek}{\um@usv@bfsfupgreek}
    \um_set_mathalphabet_greek:Nnn   \mathbfsf {\um@usv@itgreek}{\um@usv@bfsfitgreek}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@partial}{\um@usv@bfsfpartial}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varepsilon}{"1D78A}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@vartheta}{"1D78B}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varkappa}{"1D78C}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varphi}{"1D78D}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varrho}{"1D78E}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varpi}{"1D78F}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itpartial}{\um@usv@bfsfitpartial}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itvarepsilon}{"1D7C4}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itvartheta}{"1D7C5}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itvarkappa}{"1D7C6}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itvarphi}{"1D7C7}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itvarrho}{"1D7C8}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@itvarpi}{"1D7C9}
  }{
    \um_set_mathalphabet_greek:Nnn   \mathbfsf {\um@usv@upgreek,\um@usv@itgreek}{\um_bfsf_greek_up_or_it_usv}
    \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@partial,\um@usv@itpartial}{\um_bfsfpartial_up_or_it_usv}
    \bool_if:NTF \g_um_upsans_bool {
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varepsilon,\um@usv@itvarepsilon}{"1D78A}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@vartheta,\um@usv@itvartheta}{"1D78B}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varkappa,\um@usv@itvarkappa}{"1D78C}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varphi,\um@usv@itvarphi}{"1D78D}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varrho,\um@usv@itvarrho}{"1D78E}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varpi,\um@usv@itvarpi}{"1D78F}    
    }{
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varepsilon,\um@usv@itvarepsilon}{"1D7C4}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@vartheta,\um@usv@itvartheta}{"1D7C5}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varkappa,\um@usv@itvarkappa}{"1D7C6}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varphi,\um@usv@itvarphi}{"1D7C7}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varrho,\um@usv@itvarrho}{"1D7C8}
      \um_set_mathalphabet_char:Nnn    \mathbfsf {\um@usv@varpi,\um@usv@itvarpi}{"1D7C9}
    }
  }
}
%    \end{macrocode}
%
%
% \subsubsection{Bold upright sans serif: \cmd\mathbfsfup}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbfsfup_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathbfsfup}{\um@usv@num}{\um@usv@bfsfnum}
}
\cs_new:Npn \um_config_mathbfsfup_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfsfup}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bfsfupLatin}
}
\cs_new:Npn \um_config_mathbfsfup_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfsfup}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bfsfuplatin}
  \um_set_mathalphabet_char:Nnn \mathbfsfup {\um@usv@ith} {"1D5F5}
}
\cs_new:Npn \um_config_mathbfsfup_Greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfsfup}{\um@usv@upGreek,\um@usv@itGreek}{\um@usv@bfsfupGreek}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@varTheta,\um@usv@itvarTheta}{"1D767}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@Nabla,\um@usv@itNabla}{"1D76F}
}
\cs_new:Npn \um_config_mathbfsfup_greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfsfup}{\um@usv@upgreek,\um@usv@itgreek}{\um@usv@bfsfupgreek}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@partial,\um@usv@itpartial}{"1D789}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@varepsilon,\um@usv@itvarepsilon}{"1D78A}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@vartheta,\um@usv@itvartheta}{"1D78B}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@varkappa,\um@usv@itvarkappa}{"1D78C}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@varphi,\um@usv@itvarphi}{"1D78D}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@varrho,\um@usv@itvarrho}{"1D78E}
  \um_set_mathalphabet_char:Nnn{\mathbfsfup}{\um@usv@varpi,\um@usv@itvarpi}{"1D78F}
}
%    \end{macrocode}
%
%
% \subsubsection{Bold italic sans serif: \cmd\mathbfsfit}
%    \begin{macrocode}
\cs_new:Npn \um_config_mathbfsfit_num: {
  \um_set_mathalphabet_numbers:Nnn{\mathbfsfit}{\um@usv@num}{\um@usv@bfsfnum}
}
\cs_new:Npn \um_config_mathbfsfit_Latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfsfit}{\um@usv@upLatin,\um@usv@itLatin}{\um@usv@bfsfitLatin}
}
\cs_new:Npn \um_config_mathbfsfit_latin: {
  \um_set_mathalphabet_latin:Nnn{\mathbfsfit}{\um@usv@uplatin,\um@usv@itlatin}{\um@usv@bfsfitlatin}
  \um_set_mathalphabet_char:Nnn \mathbfsfit {\um@usv@ith} {"1D65D}
}
\cs_new:Npn \um_config_mathbfsfit_Greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfsfit}{\um@usv@upGreek,\um@usv@itGreek}{\um@usv@bfsfitGreek}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@varTheta}{"1D7A1}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@Nabla,\um@usv@itNabla}{\um@usv@bfsfitNabla}
}
\cs_new:Npn \um_config_mathbfsfit_greek: {
  \um_set_mathalphabet_greek:Nnn{\mathbfsfit}{\um@usv@upgreek,\um@usv@itgreek}{\um@usv@bfsfitgreek}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@partial,\um@usv@itpartial}{\um@usv@bfsfitpartial}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@varepsilon,\um@usv@itvarepsilon}{"1D7C4}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@vartheta,\um@usv@itvartheta}{"1D7C5}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@varkappa,\um@usv@itvarkappa}{"1D7C6}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@varphi,\um@usv@itvarphi}{"1D7C7}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@varrho,\um@usv@itvarrho}{"1D7C8}
  \um_set_mathalphabet_char:Nnn{\mathbfsfit}{\um@usv@varpi,\um@usv@itvarpi}{"1D7C9}
}
%    \end{macrocode}
%
% \subsection{Definitions of the math symbols}
%
% Here we define every unicode math codepoint an equivalent macro name.
% The two are equivalent, in a |\let\xyz=^^^^1234| kind of way.
%
% \begin{macro}{\um@scancharlet}
% \begin{macro}{\um@scanactivedef}
% We need to do some trickery to transform the |\UnicodeMathSymbol| argument
% |"ABCDEF| into the \XeTeX\ `caret input' form |^^^^^abcdef|. It is \emph{very important}
% that the argument has five characters. Otherwise we need to change the number of |^| chars.
%
% To do this, turn |^| into a regular `other' character and define the macro
% to perform the lowercasing and |\let|. \cmd\scantokens\ changes the carets
% back into their original meaning after the group has ended and |^|'s catcode returns to normal.
%    \begin{macrocode}
\begingroup
  \char_make_other:N \^
  \cs_gset:Npn \um@scancharlet#1="#2\@nil {
    \lowercase{
      \scantokens{\global\let#1=^^^^^#2}
    }
  }
%    \end{macrocode}
%    Making |^| the right catcode isn't strictly necessary right now but it helps to future proof us with, e.g., breqn.
%    \begin{macrocode}
  \gdef\um@scanactivedef"#1\@nil#2{
    \lowercase{
      \tl_rescan:nn{
        \ExplSyntaxOn
        \char_make_math_superscript:N\^
      }{
        \global\def^^^^^#1{#2}
      }
    }
  }
\endgroup
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Now give \cmd\UnicodeMathSymbol\ a definition in terms of \cmd\um@scancharlet\
% and we're good to go. Make sure |#| is an `other' so that we don't get confused with \cs{mathoctothorpe}.
%    \begin{macrocode}
\begingroup
  \def\UnicodeMathSymbol#1#2#3#4{
    \um@scancharlet#2=#1\@nil
  }
  \char_make_other:N \#
  \@input{unicode-math-table.tex}
\endgroup
%    \end{macrocode}
% Fix \cs{backslash}:
%    \begin{macrocode}
\group_begin:
  \lccode`\*=`\\
  \char_make_escape:N \|
  \char_make_other:N \\
  |lowercase{
|group_end:|let|backslash=*}
%    \end{macrocode}
%
% \section{Epilogue}
%
% Lots of little things to tidy up.
%
% \subsubsection{Primes}
%
% We need a new `prime' algorithm. Unicode math has four pre-drawn prime glyphs.
% \begin{quote}\obeylines
% \unichar{2032}{prime} (\cs{primesingle}): $x\primesingle$
% \unichar{2033}{double prime} (\cs{primedouble}): $x\primedouble$
% \unichar{2034}{triple prime} (\cs{primetriple}): $x\primetriple$
% \unichar{2057}{quadruple prime} (\cs{primequadruple}): $x\primequadruple$
% \end{quote}
% As you can see, they're all drawn at the correct height without being superscripted.
% However, in a correctly behaviour OpenType font with the MATH table,
% we also see different behaviour after the \texttt{ssty} feature is applied:
% \begin{quote}
% \unichar{2032}{prime} in the `scriptstyle' font:
% \font\1="Cambria Math:script=math,+ssty=0"\1
% $x$\char"2032
% \end{quote}
% The shrinking and offsetting is done as it is turned into a superscript.
% This means, luckily, that by default things work nicely for single primes.
% We can write \verb|x\primesingle| or \verb|x^\primesingle| and get: $x\primesingle$ and $x^\primesingle$.
% To support single primes, then, things are easier than in \LaTeX; we can
% just map \verb|'| to \cs{prime} and not worry about it.
% 
% However, it would be nice to use the pre-composed primes above if they exist
% in the font; consider $x\primesingle\primesingle\primesingle$ vs.\ $x\primetriple$. Our algorithm is
% \begin{itemize}
% \item Prime encountered; pcount=1.
% \item Scan ahead; if prime: pcount:=pcount+1; repeat.
% \item If not prime, stop scanning.
% \item If pcount=1, \cs{prime}, end.
% \item If pcount=2, check \cs{primedouble}; if it exists, use it, end; if not, goto last step.
% \item Ditto pcount=3 \& \cs{primetriple}.
% \item Ditto pcount=4 \& \cs{primequadruple}.
% \item If pcount>4 or the glyph doesn't exist, insert pcount \cs{prime}s with \cs{primekern} between each.
% \end{itemize}
%
%    \begin{macrocode}
\muskip_new:N \g_um_primekern_muskip
\muskip_gset:Nn \g_um_primekern_muskip { -\thinmuskip/2 }% arbitrary
\num_new:N \l_um_primecount_num
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_new:Nn \um_nprimes:n {
  ^{
     \primesingle
     \prg_replicate:nn {#1-1} { \mskip \g_um_primekern_muskip \primesingle }
   }
}
\cs_new:Nn \um_nprimes_select:n {
  \prg_case_int:nnn {#1}{
    {1} { ^{\primesingle} }
    {2} { 
      \um_glyph_if_exist:nTF {"2033} { ^{\primedouble} } {\um_nprimes:n {#1}}
    }
    {3} { 
      \um_glyph_if_exist:nTF {"2034} {^{\primetriple} } {\um_nprimes:n {#1}}
    }
    {4} { 
      \um_glyph_if_exist:nTF {"2057} { ^{\primequadruple} } {\um_nprimes:n {#1}}
    }
  }{ 
    \um_nprimes:n {#1}
  }
}
%    \end{macrocode}
%
% Scanning is more annoying than you'd think because we want to support all three of |\prime|, |'|, and the unicode prime. And |\ifx| doesn't work with mathactive chars.
%
%    \begin{macrocode}
\cs_new:Nn \um_scanprime: {
  \num_zero:N \l_um_primecount_num
  \um_scanprime_collect:
}
\cs_new:Nn \um_scanprime_collect: {
  \num_incr:N \l_um_primecount_num
  \peek_meaning_remove:NTF ' { 
    \um_scanprime_collect: 
  }{
    \peek_meaning_remove:NTF \um_scanprime: {
      \um_scanprime_collect:
    }{
      \peek_meaning_remove:NTF ^^^^2032 {
        \um_scanprime_collect:
      }{
        \um_nprimes_select:n {\l_um_primecount_num}
      }
    }
  }
}
%    \end{macrocode}
%
%    \begin{macrocode}
\cs_set_eq:NN \prime \um_scanprime:
\group_begin:
  \char_make_active:N \'
  \char_make_active:n {"2032}
  \cs_gset_eq:NN ' \um_scanprime:
  \cs_gset_eq:NN ^^^^2032 \um_scanprime:
\group_end:
%    \end{macrocode}
%
% \subsubsection{Unicode radicals}
%
% Undo the damage made to \cmd\sqrt:
%    \begin{macrocode}
\DeclareRobustCommand\sqrt{\@ifnextchar[\@sqrt\sqrtsign}
%    \end{macrocode}
%
% \begin{macro}{\r@@t}
% \darg{A mathstyle (for \cmd\mathpalette)}
% \darg{Leading superscript for the sqrt sign}
% A re-implementation of \LaTeX's hard-coded n-root sign using the appropriate \cmd\fontdimen s.
%    \begin{macrocode}
\def\r@@t#1#2{
  \setbox\z@\hbox{$\m@th #1\sqrtsign{#2}$}
  \um@scaled@apply{#1}{\kern}{\fontdimen63\um@font}
  \raise \dimexpr(
      \um@fontdimen@percent{65}{\um@font}\ht\z@-
      \um@fontdimen@percent{65}{\um@font}\dp\z@
    )\relax
    \copy \rootbox
  \um@scaled@apply{#1}{\kern}{\fontdimen64\um@font}
  \box \z@
}
%    \end{macrocode}
% \end{macro}
% 
% \subsubsection{Unicode sub- and super-scripts}
% 
% The idea here is to enter a scanning state after a superscript or subscript is encountered.
% If subsequent superscripts or subscripts (resp.) are found, they are lumped together.
% Each sub/super has a corresponding regular size glyph which is used by \XeTeX\ to typeset
% the results; this means that the actual subscript/superscript glyphs are never seen in the
% output document~--- they are only used as input characters.
% 
% Open question: should the superscript-like `modifiers' (\unichar{1D2C}{modifier capital letter a} and on)
% be included here?
% 
% First, the setup of each mathactive char:
%    \begin{macrocode}
\prop_new:N \g_um_supers_prop
\prop_new:N \g_um_subs_prop
\cs_generate_variant:Nn \prop_gput:Nnn {Nxn}
\cs_generate_variant:Nn \prop_get:NnN {cxN}
\cs_generate_variant:Nn \prop_if_in:NnTF {cx}

\group_begin:

% Populate a property list with superscript characters; their meaning as their key,
% for reasons that will become apparent soon, and their replacement as each key's value.
% Then make the superscript active and bind it to the scanning function.
% 
% \cs{scantokens} makes this process much simpler since we can activate the char
% and assign its meaning in one step.
\cs_set:Nn \um_setup_active_superscript:nn {
  \prop_gput:Nxn \g_um_supers_prop   {\meaning #1} {#2}
  \char_make_active:n {`#1}
  \global\XeTeXmathcodenum `#1 = "1FFFFF \scan_stop:
  \scantokens{
    \cs_gset:Npn #1 {
      \tl_set:Nn \l_um_ss_chain_tl {#2}
      \cs_set_eq:NN \um_sub_or_super:n \sp
      \tl_set:Nn \l_um_tmpa_tl {supers}
      \um_scan_sscript:
    }
  }
}

\um_setup_active_superscript:nn {^^^^2070} {0}
\um_setup_active_superscript:nn {^^^^00b9} {1}
\um_setup_active_superscript:nn {^^^^00b2} {2}
\um_setup_active_superscript:nn {^^^^00b3} {3}
\um_setup_active_superscript:nn {^^^^2074} {4}
\um_setup_active_superscript:nn {^^^^2075} {5}
\um_setup_active_superscript:nn {^^^^2076} {6}
\um_setup_active_superscript:nn {^^^^2077} {7}
\um_setup_active_superscript:nn {^^^^2078} {8}
\um_setup_active_superscript:nn {^^^^2079} {9}
\um_setup_active_superscript:nn {^^^^207a} {+}
\um_setup_active_superscript:nn {^^^^207b} {-}
\um_setup_active_superscript:nn {^^^^207c} {=}
\um_setup_active_superscript:nn {^^^^207d} {(}
\um_setup_active_superscript:nn {^^^^207e} {)}
\um_setup_active_superscript:nn {^^^^2071} {i}
\um_setup_active_superscript:nn {^^^^207f} {n}

% Ditto above.
\cs_set:Nn \um_setup_active_subscript:nn {
  \prop_gput:Nxn \g_um_subs_prop   {\meaning #1} {#2}
  \char_make_active:n {`#1}
  \global\XeTeXmathcodenum `#1 = "1FFFFF \scan_stop:
  \scantokens{
    \cs_gset:Npn #1 {
      \tl_set:Nn \l_um_ss_chain_tl {#2}
      \cs_set_eq:NN \um_sub_or_super:n \sb
      \tl_set:Nn \l_um_tmpa_tl {subs}
      \um_scan_sscript:
    }
  }   
}

\um_setup_active_subscript:nn {^^^^2080} {0}
\um_setup_active_subscript:nn {^^^^2081} {1}
\um_setup_active_subscript:nn {^^^^2082} {2}
\um_setup_active_subscript:nn {^^^^2083} {3}
\um_setup_active_subscript:nn {^^^^2084} {4}
\um_setup_active_subscript:nn {^^^^2085} {5}
\um_setup_active_subscript:nn {^^^^2086} {6}
\um_setup_active_subscript:nn {^^^^2087} {7}
\um_setup_active_subscript:nn {^^^^2088} {8}
\um_setup_active_subscript:nn {^^^^2089} {9}
\um_setup_active_subscript:nn {^^^^208a} {+}
\um_setup_active_subscript:nn {^^^^208b} {-}
\um_setup_active_subscript:nn {^^^^208c} {=}
\um_setup_active_subscript:nn {^^^^208d} {(}
\um_setup_active_subscript:nn {^^^^208e} {)}
\um_setup_active_subscript:nn {^^^^2090} {a}
\um_setup_active_subscript:nn {^^^^2091} {e}
\um_setup_active_subscript:nn {^^^^1d62} {i}
\um_setup_active_subscript:nn {^^^^2092} {o}
\um_setup_active_subscript:nn {^^^^1d63} {r}
\um_setup_active_subscript:nn {^^^^1d64} {u}
\um_setup_active_subscript:nn {^^^^1d65} {v}
\um_setup_active_subscript:nn {^^^^2093} {x}
\um_setup_active_subscript:nn {^^^^1d66} {\beta}
\um_setup_active_subscript:nn {^^^^1d67} {\gamma}
\um_setup_active_subscript:nn {^^^^1d68} {\rho}
\um_setup_active_subscript:nn {^^^^1d69} {\phi}
\um_setup_active_subscript:nn {^^^^1d6a} {\chi}

\group_end:

% The scanning command, evident in its purpose:
\cs_new:Nn \um_scan_sscript: {
  \um_scan_sscript:TF {
    \um_scan_sscript:
  }{
    \um_sub_or_super:n {\l_um_ss_chain_tl}
  }
}

% The main theme here is stolen from the source to the various \cs{peek_} functions.
% Consider this function as simply boilerplate:
\cs_new:Nn \um_scan_sscript:TF {
  \tl_set:Nx \l_peek_true_aux_tl { \exp_not:n{ #1 } }
  \tl_set_eq:NN \l_peek_true_tl \c_peek_true_remove_next_tl
  \tl_set:Nx \l_peek_false_tl {\exp_not:n{\group_align_safe_end: #2}}
  \group_align_safe_begin:
    \peek_after:NN \um_peek_execute_branches_ss:
}

% We do not skip spaces when scanning ahead, and we explicitly wish to
% bail out on encountering a space or a brace.
\cs_new:Npn \um_peek_execute_branches_ss: {
  \bool_if:nTF {
    \token_if_eq_catcode_p:NN \l_peek_token \c_group_begin_token ||
    \token_if_eq_catcode_p:NN \l_peek_token \c_group_end_token ||
    \token_if_eq_meaning_p:NN \l_peek_token \c_space_token
  }
  { \l_peek_false_tl  }
  { \um_peek_execute_branches_ss_aux: }
}

% This is the actual comparison code.
% Because the peeking has already tokenised the next token,
% it's too late to extract its charcode directly. Instead,
% we look at its meaning, which remains a `character' even
% though it is itself math-active. If the character is ever
% made fully active, this will break our assumptions!
% 
% If the char's meaning exists as a property list key, we
% build up a chain of sub-/superscripts and iterate. (If not, exit and
% typeset what we've already collected.)
\cs_new:Nn \um_peek_execute_branches_ss_aux: {
  \prop_if_in:cxTF
    {g_um_\l_um_tmpa_tl _prop} 
    {\meaning\l_peek_token} 
    {
      \prop_get:cxN 
        {g_um_\l_um_tmpa_tl _prop} 
        {\meaning\l_peek_token}
        \l_um_tmpb_tl
      \tl_put_right:NV \l_um_ss_chain_tl \l_um_tmpb_tl
      \l_peek_true_tl
    }
    {\l_peek_false_tl}
}
%    \end{macrocode}
%
%
% \subsubsection{Synonyms and all the rest}
%
% We need to change \LaTeX's idea of the font used to typeset
% things like \cmd\sin\ and \cmd\cos:
%    \begin{macrocode}
\def\operator@font{\um_setup_mathup:}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\to{\rightarrow}
\def\vec{\overrightarrow}
\def\le{\leq}
\def\ge{\geq}
\def\neq{\ne}
%    \end{macrocode}
%
% Define \cs{colon} as a mathpunct `|:|'. This is wrong: it should be \unichar{003A}{colon} instead!
%    \begin{macrocode}
\@ifpackageloaded{amsmath}{
  % define their own colon, perhaps I should just steal it.
}{
  \cs_set_protected:Npn \colon {
    \bool_if:NTF \g_um_literal_colon_bool {:} { \mathpunct{:} }
  }
}
%    \end{macrocode}
%
% \begin{macro}{\mathcal}
%    \begin{macrocode}
\def\mathcal{\mathscr}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\mathrm}
%    \begin{macrocode}
\def\mathrm{\mathup}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Compatibility}
%
%
% Note that \pkg{amsmath} will always be loaded before \pkg{unicode-math}.
% (Conflicts occur if you try it the other way around.)
%
% \begin{itemize}
% \item Since the mathcode of |`\-| is greater than eight bits, this piece of |\AtBeginDocument| code from \pkg{amsmath} dies if we try and set the maths font in the preamble:
%    \begin{macrocode}
\@ifpackageloaded{amsmath}{
  \tl_remove_in:Nn \@begindocumenthook {
    \mathchardef\std@minus\mathcode`\-\relax
    \mathchardef\std@equal\mathcode`\=\relax
  }
}{}
%    \end{macrocode}
% \item This code is to improve the output of analphabetic symbols in text of operator names (\cs{sin}, \cs{cos}, etc.). Just comment out the offending lines for now:
%    \begin{macrocode}
\@ifpackageloaded{amsopn}{
  \cs_set:Npn \newmcodes@ {
    \mathcode`\'39
    \mathcode`\*42
    \mathcode`\."613A%
%  \ifnum\mathcode`\-=45 \else
%    \mathchardef\std@minus\mathcode`\-\relax
%  \fi
    \mathcode`\-45
    \mathcode`\/47
    \mathcode`\:"603A\relax
  }
}{}
%    \end{macrocode}
% \end{itemize}
%
%
% Octothorpe is an odd one:
%    \begin{macrocode}
\AtBeginDocument{
  \def\#{\mode_if_math:TF{\mathoctothorpe}{\char`\#}}
  \def\widehat{\hat}
  \def\widetilde{\tilde}
}
%    \end{macrocode}
%
% \begin{macro}{\digamma}
% \begin{macro}{\Digamma}
% I might end up just changing these in the table.
%    \begin{macrocode}
\def\digamma{\updigamma}
\def\Digamma{\upDigamma}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Overriding \pkg{amsmath} definitions:
%    \begin{macrocode}
\AtBeginDocument{
  \def\@cdots{\mathinner{\cdots}}
}
%    \end{macrocode}
%
% Interaction with \pkg{beamer}:
%    \begin{macrocode}
\@ifclassloaded{beamer}{
  \ifbeamer@suppressreplacements\else
    \PackageWarningNoLine{unicode-math}{
      Disabling~ beamer's~ math~ setup.^^J
      Please~ load~ beamer~ with~ the~ [professionalfonts]~ class~ option 
    }
    \beamer@suppressreplacementstrue
  \fi
}{}
%    \end{macrocode}
%
% The end.
%    \begin{macrocode}
\ExplSyntaxOff
%    \end{macrocode}
%
%\iffalse
%</package>
%\fi
%
%
% \part{\STIX\ table data extraction}\label{part:awk}
%\iffalse
%<*awk>
%\fi
%
% The source for the \TeX\ names for the very large number of mathematical
% glyphs are provided via Barbara Beeton's table file for the \STIX\ project
% (|ams.org/STIX|). A version is located at
% |http://www.ams.org/STIX/bnb/stix-tbl.asc|
% but check |http://www.ams.org/STIX/| for more up-to-date info.
%
% This table is converted into a form suitable for reading by \XeTeX, and
% then hand-edited by the author; the result is |unicode-math-table.tex|.
%
% A single file is produced containing all (more than 3298) symbols.
% Future optimisations might include generating various (possibly overlapping) subsets
% so not all definitions must be read just to redefine a small range of symbols.
% Performance for now seems to be acceptable without such measures.
%
%    \begin{macrocode}
#!/bin/sh

cat stix-tbl.txt |
awk '
%    \end{macrocode}
% If the USV isn't repeated (TODO: check this is valid!) and the entry isn't one of the weird ones in the big block at the end of the \STIX\ table (TODO: check that out!)\dots
%    \begin{macrocode}
 {if (usv != substr($0,2,5) && substr($0,2,1) != " ")
    {usv = substr($0,2,5);
     texname = substr($0,84,25);
     class = substr($0,57,1);
     description = tolower(substr($0,233,350));
%    \end{macrocode}
% If the USV has a macro name, which isn't \cs{text...}, and isn't a single character macro (e.g., \cmd\#, \cmd\S, \dots), and has a class, and it isn't reserved (\ie, doubled up with a previously assigned glyph):
%    \begin{macrocode}
     if (texname      ~ /[\\]/ && 
         substr(texname,0,5) != "\\text"    && 
         substr(texname,0,4) != "\\ipa"    && 
         substr(texname,0,5) != "\\tone"    && 
         substr(texname,3,1) != " "    &&
         class       != " "    && 
         description !~ /<reserved>/ )
%    \end{macrocode}
% Print the actual entry corresponding to the unicode character:
%    \begin{macrocode}
     print "\\UnicodeMathSymbol{\"" \
           usv "}{" \
           texname "}{" \
           class "}{" \
           description "}%";
    }}' - |
%    \end{macrocode}
% Now replace the \STIX\ class abbreviations with their \TeX\ macro names.
%    \begin{macrocode}
sed -e ' s/{N}/{\\mathord}/   ' \
%    \end{macrocode}
% A `fence' defined by the \STIX\ table is something like \cmd\vert; in \XeTeX\ this is just a \cmd\mathord\ that will grow with the magic of \cmd\XeTeXmathchardef.
%    \begin{macrocode}
    -e ' s/{F}/{\\mathord}/   ' \
    -e ' s/{A}/{\\mathalpha}/ ' \
    -e ' s/{D}/{\\mathaccent}/ ' \
    -e ' s/{P}/{\\mathpunct}/ ' \
    -e ' s/{B}/{\\mathbin}/   ' \
    -e ' s/{R}/{\\mathrel}/   ' \
    -e ' s/{L}/{\\mathop}/    ' \
    -e ' s/{O}/{\\mathopen}/  ' \
    -e ' s/{C}/{\\mathclose}/ ' \
%    \end{macrocode}
% Fixing up a couple of things in the STIX table.
%    \begin{macrocode}
    -e ' s/\^/\\string^/   ' > unicode-math.tex
%    \end{macrocode}
%\iffalse
%</awk>
%\fi
%
% \appendix
%
% \section{Documenting maths support in the NFSS}
% \subsection{Overview}
% 
% In the following, \meta{NFSS decl.} stands for something like |{T1}{lmr}{m}{n}|.
%
% \begin{description}
% \item[Maths symbol fonts] Fonts for symbols: $\propto$, $\leq$, $\rightarrow$
%
% \cmd\DeclareSymbolFont\marg{name}\meta{NFSS decl.}\\
% Declares a named maths font such as |operators| from which symbols are defined with \cmd\DeclareMathSymbol.
%
% \item[Maths alphabet fonts] Fonts for {\font\1=cmmi10 at 10pt\1 ABC}\,–\,{\font\1=cmmi10 at 10pt\1 xyz}, {\font\1=eufm10 at 10pt\1 ABC}\,–\,{\font\1=cmsy10 at 10pt\1 XYZ}, etc.
%
% \cmd\DeclareMathAlphabet\marg{cmd}\meta{NFSS decl.}
%
% For commands such as \cmd\mathbf, accessed
% through maths mode that are unaffected by the current text font, and which are used for
% alphabetic symbols in the \ascii\ range.
%
% \cmd\DeclareSymbolFontAlphabet\marg{cmd}\marg{name}
%
% Alternative (and optimisation) for \cmd\DeclareMathAlphabet\ if a single font is being used
% for both alphabetic characters (as above) and symbols.
%
% \item[Maths `versions'] Different maths weights can be defined with the following, switched
% in text with the \cmd\mathversion\marg{maths version} command.
%
% \cmd\SetSymbolFont\marg{name}\marg{maths version}\meta{NFSS decl.}\\
% \cmd\SetMathAlphabet\marg{cmd}\marg{maths version}\meta{NFSS decl.}
%
% \item[Maths symbols] Symbol definitions in maths for both characters (=) and macros (\cmd\eqdef):
% \cmd\DeclareMathSymbol\marg{symbol}\marg{type}\marg{named font}\marg{slot}
% This is the macro that actually defines which font each symbol comes from and how they behave.
% \end{description}
% Delimiters and radicals use wrappers around \TeX's \cmd\delimiter/\cmd\radical\ primitives,
% which are re-designed in \XeTeX. The syntax used in \LaTeX's NFSS is therefore not so relevant here.
% \begin{description}
% \item[Delimiters] A special class of maths symbol which enlarge themselves in certain contexts.
%
% \cmd\DeclareMathDelimiter\marg{symbol}\marg{type}\marg{sym.\ font}\marg{slot}\marg{sym.\ font}\marg{slot}
%
% \item[Radicals] Similar to delimiters (\cmd\DeclareMathRadical\ takes the same syntax) but
% behave `weirdly'. \cmd\sqrt\ might very well be the only one.
% \end{description}
% In those cases, glyph slots in \emph{two} symbol fonts are required; one for the small (`regular') case,
% the other for situations when the glyph is larger. This is not the case in \XeTeX.
%
% Accents are not included yet.
%
% \paragraph{Summary}
%
% For symbols, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{
%   \global\mathchardef#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
% For characters, something like:
% \begin{verbatim}
% \def\DeclareMathSymbol#1#2#3#4{
%   \global\mathcode`#1"\mathchar@type#2
%     \expandafter\hexnumber@\csname sym#2\endcsname
%     {\hexnumber@{\count\z@}\hexnumber@{\count\tw@}}}
% \end{verbatim}
%
% \part{\XeTeX\ math font dimensions}
%
% These are the extended \cmd\fontdimen s available for suitable fonts
% in \XeTeX. Note that Lua\TeX\ takes an alternative route, and this package
% will eventually provide a wrapper interface to the two (I hope).
%
% \newcounter{mfdimen}
% \setcounter{mfdimen}{9}
% \newcommand\mathfontdimen[2]{^^A
%   \stepcounter{mfdimen}^^A
%   \themfdimen & {\scshape\small #1} & #2\vspace{0.5ex} \tabularnewline}
%
% \begin{longtable}{
%   @{}c>{\raggedright\parfillskip=0pt}p{4cm}>{\raggedright}p{7cm}@{}}
% \toprule \cmd\fontdimen & Dimension name & Description\tabularnewline\midrule \endhead
% \bottomrule\endfoot
% \mathfontdimen{Script\-Percent\-Scale\-Down}
% {Percentage of scaling down for script level 1. Suggested value: 80\%.}
% \mathfontdimen{Script\-Script\-Percent\-Scale\-Down}
% {Percentage of scaling down for script level 2 (Script\-Script). Suggested value: 60\%.}
% \mathfontdimen{Delimited\-Sub\-Formula\-Min\-Height}
% {Minimum height required for a delimited expression to be treated as a subformula. Suggested value: normal line height\,×\,1.5.}
% \mathfontdimen{Display\-Operator\-Min\-Height}
% {Minimum height of n-ary operators (such as integral and summation) for formulas in display mode.}
% \mathfontdimen{Math\-Leading}
% {White space to be left between math formulas to ensure proper line spacing. For example, for applications that treat line gap as a part of line ascender, formulas with ink  going above (os2.sTypoAscender + os2.sTypoLineGap – MathLeading) or with ink going below os2.sTypoDescender will result in increasing line height.}
% \mathfontdimen{Axis\-Height}
% {Axis height of the font. }
% \mathfontdimen{Accent\-Base\-Height}
% {Maximum (ink) height of accent base that does not require raising the accents. Suggested: x-height of the font (os2.sxHeight) plus any possible overshots. }
% \mathfontdimen{Flattened\-Accent\-Base\-Height}
% {Maximum (ink) height of accent base that does not require flattening the accents. Suggested: cap height of the font (os2.sCapHeight).}
% \mathfontdimen{Subscript\-Shift\-Down}
% {The standard shift down applied to subscript elements. Positive for moving in the downward direction. Suggested: os2.ySubscriptYOffset.}
% \mathfontdimen{Subscript\-Top\-Max}
% {Maximum allowed height of the (ink) top of subscripts that does not require moving subscripts further down. Suggested: /5 x-height.}
% \mathfontdimen{Subscript\-Baseline\-Drop\-Min}
% {Minimum allowed drop of the baseline of subscripts relative to the (ink) bottom of the base. Checked for bases that are treated as a box or extended shape. Positive for subscript baseline dropped below the base bottom.}
% \mathfontdimen{Superscript\-Shift\-Up}
% {Standard shift up applied to superscript elements. Suggested: os2.ySuperscriptYOffset.}
% \mathfontdimen{Superscript\-Shift\-Up\-Cramped}
% {Standard shift of superscripts relative to the base, in cramped style.}
% \mathfontdimen{Superscript\-Bottom\-Min}
% {Minimum allowed height of the (ink) bottom of superscripts that does not require moving subscripts further up. Suggested: ¼ x-height.}
% \mathfontdimen{Superscript\-Baseline\-Drop\-Max}
% {Maximum allowed drop of the baseline of superscripts relative to the (ink) top of the base. Checked for bases that are treated as a box or extended shape. Positive for superscript baseline below the base top.}
% \mathfontdimen{Sub\-Superscript\-Gap\-Min}
% {Minimum gap between the superscript and subscript ink. Suggested: 4×default rule thickness.}
% \mathfontdimen{Superscript\-Bottom\-Max\-With\-Subscript}
% {The maximum level to which the (ink) bottom of superscript can be pushed to increase the gap between superscript and subscript, before subscript starts being moved down. 
% Suggested: /5 x-height.}
% \mathfontdimen{Space\-After\-Script}
% {Extra white space to be added after each subscript and superscript. Suggested: 0.5pt for a 12 pt font.}
% \mathfontdimen{Upper\-Limit\-Gap\-Min}
% {Minimum gap between the (ink) bottom of the upper limit, and the (ink) top of the base operator. }
% \mathfontdimen{Upper\-Limit\-Baseline\-Rise\-Min}
% {Minimum distance between baseline of upper limit and (ink) top of the base operator.}
% \mathfontdimen{Lower\-Limit\-Gap\-Min}
% {Minimum gap between (ink) top of the lower limit, and (ink) bottom of the base operator.}
% \mathfontdimen{Lower\-Limit\-Baseline\-Drop\-Min}
% {Minimum distance between baseline of the lower limit and (ink) bottom of the base operator.}
% \mathfontdimen{Stack\-Top\-Shift\-Up}
% {Standard shift up applied to the top element of a stack.}
% \mathfontdimen{Stack\-Top\-Display\-Style\-Shift\-Up}
% {Standard shift up applied to the top element of a stack in display style.}
% \mathfontdimen{Stack\-Bottom\-Shift\-Down}
% {Standard shift down applied to the bottom element of a stack. Positive for moving in the downward direction.}
% \mathfontdimen{Stack\-Bottom\-Display\-Style\-Shift\-Down}
% {Standard shift down applied to the bottom element of a stack in display style. Positive for moving in the downward direction.}
% \mathfontdimen{Stack\-Gap\-Min}
% {Minimum gap between (ink) bottom of the top element of a stack, and the (ink) top of the bottom element. Suggested: 3×default rule thickness.}
% \mathfontdimen{Stack\-Display\-Style\-Gap\-Min}
% {Minimum gap between (ink) bottom of the top element of a stack, and the (ink) top of the bottom element in display style. Suggested: 7×default rule thickness.}
% \mathfontdimen{Stretch\-Stack\-Top\-Shift\-Up}
% {Standard shift up applied to the top element of the stretch stack.}
% \mathfontdimen{Stretch\-Stack\-Bottom\-Shift\-Down}
% {Standard shift down applied to the bottom element of the stretch stack. Positive for moving in the downward direction.}
% \mathfontdimen{Stretch\-Stack\-Gap\-Above\-Min}
% {Minimum gap between the ink of the stretched element, and the (ink) bottom of the element above. Suggested: Upper\-Limit\-Gap\-Min}
% \mathfontdimen{Stretch\-Stack\-Gap\-Below\-Min}
% {Minimum gap between the ink of the stretched element, and the (ink) top of the element below. Suggested: Lower\-Limit\-Gap\-Min.}
% \mathfontdimen{Fraction\-Numerator\-Shift\-Up}
% {Standard shift up applied to the numerator. }
% \mathfontdimen{Fraction\-Numerator\-Display\-Style\-Shift\-Up}
% {Standard shift up applied to the numerator in display style. Suggested: Stack\-Top\-Display\-Style\-Shift\-Up.}
% \mathfontdimen{Fraction\-Denominator\-Shift\-Down}
% {Standard shift down applied to the denominator. Positive for moving in the downward direction.}
% \mathfontdimen{Fraction\-Denominator\-Display\-Style\-Shift\-Down}
% {Standard shift down applied to the denominator in display style. Positive for moving in the downward direction. Suggested: Stack\-Bottom\-Display\-Style\-Shift\-Down.}
% \mathfontdimen{Fraction\-Numerator\-Gap\-Min}
% {Minimum tolerated gap between the (ink) bottom of the numerator and the ink of the fraction bar. Suggested: default rule thickness}
% \mathfontdimen{Fraction\-Num\-Display\-Style\-Gap\-Min}
% {Minimum tolerated gap between the (ink) bottom of the numerator and the ink of the fraction bar in display style. Suggested: 3×default rule thickness.}
% \mathfontdimen{Fraction\-Rule\-Thickness}
% {Thickness of the fraction bar. Suggested: default rule thickness.}
% \mathfontdimen{Fraction\-Denominator\-Gap\-Min}
% {Minimum tolerated gap between the (ink) top of the denominator and the ink of the fraction bar. Suggested: default rule thickness}
% \mathfontdimen{Fraction\-Denom\-Display\-Style\-Gap\-Min}
% {Minimum tolerated gap between the (ink) top of the denominator and the ink of the fraction bar in display style. Suggested: 3×default rule thickness.}
% \mathfontdimen{Skewed\-Fraction\-Horizontal\-Gap}
% {Horizontal distance between the top and bottom elements of a skewed fraction.}
% \mathfontdimen{Skewed\-Fraction\-Vertical\-Gap}
% {Vertical distance between the ink of the top and bottom elements of a skewed fraction.}
% \mathfontdimen{Overbar\-Vertical\-Gap}
% {Distance between the overbar and the (ink) top of he base. Suggested: 3×default rule thickness.}
% \mathfontdimen{Overbar\-Rule\-Thickness}
% {Thickness of overbar. Suggested: default rule thickness.}
% \mathfontdimen{Overbar\-Extra\-Ascender}
% {Extra white space reserved above the overbar. Suggested: default rule thickness.}
% \mathfontdimen{Underbar\-Vertical\-Gap}
% {Distance between underbar and (ink) bottom of the base. Suggested: 3×default rule thickness.}
% \mathfontdimen{Underbar\-Rule\-Thickness}
% {Thickness of underbar. Suggested: default rule thickness.}
% \mathfontdimen{Underbar\-Extra\-Descender}
% {Extra white space reserved below the underbar. Always positive. Suggested: default rule thickness.}
% \mathfontdimen{Radical\-Vertical\-Gap}
% {Space between the (ink) top of the expression and the bar over it. Suggested: 1¼ default rule thickness.}
% \mathfontdimen{Radical\-Display\-Style\-Vertical\-Gap}
% {Space between the (ink) top of the expression and the bar over it. Suggested: default rule thickness + ¼ x-height. }
% \mathfontdimen{Radical\-Rule\-Thickness}
% {Thickness of the radical rule. This is the thickness of the rule in designed or constructed radical signs. Suggested: default rule thickness.}
% \mathfontdimen{Radical\-Extra\-Ascender}
% {Extra white space reserved above the radical. Suggested: Radical\-Rule\-Thickness.}
% \mathfontdimen{Radical\-Kern\-Before\-Degree}
% {Extra horizontal kern before the degree of a radical, if such is present. Suggested: 5/18 of em.}
% \mathfontdimen{Radical\-Kern\-After\-Degree}
% {Negative kern after the degree of a radical, if such is present. Suggested: −10/18 of em.}
% \mathfontdimen{Radical\-Degree\-Bottom\-Raise\-Percent}
% {Height of the bottom of the radical degree, if such is present, in proportion to the ascender of the radical sign. Suggested: 60\%.}
% \end{longtable}
%
% \clearpage
% \PrintChanges
%
% \clearpage
% \PrintIndex
%
% \Finale
%
% \iffalse
%
%<*dtx-style>
%    \begin{macrocode}
\ProvidesPackage{dtx-style}

\errorcontextlines=999

\def\@dotsep{1000}
\setcounter{tocdepth}{2}
\setlength\columnseprule{0.4pt}
\renewcommand\tableofcontents{\relax
  \begin{multicols}{2}[\section*{\contentsname}]\relax
    \@starttoc{toc}\relax
  \end{multicols}}

\setcounter{IndexColumns}{2}
\renewenvironment{theglossary}
  {\small\list{}{}
     \item\relax
     \glossary@prologue\GlossaryParms 
     \let\item\@idxitem \ignorespaces 
     \def\pfill{\hspace*{\fill}}}
  {\endlist}

\usepackage[svgnames]{xcolor}
\usepackage{array,booktabs,calc,enumitem,fancyvrb,graphicx,ifthen,longtable,refstyle,subfig,topcapt,url,varioref,underscore}
\setcounter{LTchunksize}{100}
\usepackage{xltxtra}
\usepackage{unicode-math}

%\usepackage[rm,small]{titlesec}

\setromanfont[Mapping=tex-text]{TeX Gyre Pagella}
\setsansfont[Scale=MatchLowercase,Mapping=tex-text]{Linux Biolinum O}
\setmonofont[Scale=MatchLowercase]{Consolas}
\setmathfont{Cambria Math}

\linespread{1.069}      % A bit more space between lines
\frenchspacing         % Remove ugly extra space after punctuation
  
\definecolor{niceblue}{rgb}{0.2,0.4,0.8}
\newenvironment{example}[1]
  {\VerbatimEnvironment
   \def\Options{#1}
   \begin{VerbatimOut}[gobble=4]{\examplefilename}}
  {\end{VerbatimOut}\relax
   \typesetexample}

\def\theCodelineNo{\textcolor{niceblue}{\sffamily\tiny\arabic{CodelineNo}}}

\let\examplesize\normalsize
\let\auxwidth\relax

\newlength\examplewidth\newlength\verbatimwidth
\newlength\exoutdent   \newlength\exverbgap
\setlength\exverbgap{1em}
\setlength\exoutdent{-0.15\textwidth}
\newsavebox\verbatimbox
\edef\examplefilename{\jobname.example}

\newcommand\typesetexample{\relax
   \smallskip
   \noindent
   \begin{minipage}{\linewidth}
   \color{niceblue}
   \hrulefill\par
   \edef\@tempa{[gobble=0,fontsize=\noexpand\scriptsize,\Options]}
   \begin{lrbox}{\verbatimbox}\relax
     \expandafter\BVerbatimInput\@tempa{\examplefilename}
   \end{lrbox}
   \begin{list}{}{\setlength\itemindent{0pt}
                  \setlength\leftmargin\exoutdent
                  \setlength\rightmargin{0pt}}\item
   \ifx\auxwidth\relax
     \setlength\verbatimwidth{\wd\verbatimbox}
   \else
     \setlength\verbatimwidth{\auxwidth}
   \fi
   \begin{minipage}[c]{\textwidth-\exoutdent-\verbatimwidth-\exverbgap}
     \catcode`\%=14\centering\input\examplefilename\relax
   \end{minipage}\hfill
   \begin{minipage}[c]{\verbatimwidth}
     \usebox\verbatimbox
   \end{minipage}
   \end{list}
   \par\noindent\hrulefill
   \end{minipage}
   \smallskip}

\newcommand*\setverbwidth[1]{\def\auxwidth{#1}}

\newcommand*\name[1]{{#1}}
\newcommand*\pkg[1]{\textsf{#1}}
\newcommand*\feat[1]{\texttt{#1}}
\newcommand*\opt[1]{\texttt{#1}}

\newcommand*\note[1]{\unskip\footnote{#1}}

\let\latin\textit
\def\eg{\latin{e.g.}}
\def\Eg{\latin{E.g.}}
\def\ie{\latin{i.e.}}
\def\etc{\@ifnextchar.{\latin{etc}}{\latin{etc.}\@}}

\def\STIX{\textsc{stix}}
\def\MacOSX{Mac~OS~X}
\def\ascii{\textsc{ascii}}
\def\OMEGA{Omega}

\makeatletter
\newcounter{argument}
\g@addto@macro\endmacro{\setcounter{argument}{0}}
\newcommand*\darg[1]{%
  \stepcounter{argument}%
  {\ttfamily\char`\#\theargument~:~}#1\par\noindent\ignorespaces
}
\newcommand*\doarg[1]{%
  \stepcounter{argument}%
  {\ttfamily\makebox[0pt][r]{[}\char`\#\theargument]:~}#1\par\noindent\ignorespaces
}
\makeatother
\newcommand\codeline[1]{\par{\centering#1\par\noindent}\ignorespaces}

\newcommand\unichar[2]{\textsc{\MakeLowercase{u+#1: #2}}}

\setlength\parindent{2em}

\def \MakePrivateLetters {%
  \catcode`\@=11\relax
  \catcode`\_=11\relax
  \catcode`\:=11\relax
}
%    \end{macrocode}
%</dtx-style>
%\fi
%
% \typeout{*************************************************************}
% \typeout{*}
% \typeout{* To finish the installation you have to move the following}
% \typeout{* file into a directory searched by XeTeX:}
% \typeout{*}
% \typeout{* \space\space\space unicode-math.sty}
% \typeout{*}
% \typeout{*************************************************************}
%
\endinput
 
